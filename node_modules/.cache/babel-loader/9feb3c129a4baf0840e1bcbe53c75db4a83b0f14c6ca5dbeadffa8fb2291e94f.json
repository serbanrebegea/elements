{"ast":null,"code":"// src/utils/optimizer.js\n\n// Greedy, edge‑to‑edge packer that enforces a 207mm margin\nexport default function optimizeLayout(polygonPoints,\n// [{x,y},…] in meters\nzoneW,\n// bounding‑box width in m\nzoneH,\n// bounding‑box height in m\nlengthsIn,\n// e.g. [4,2,1]\ntileW,\n// short side of tile in m (1.26)\nmargin,\n// clearance from walls in m (0.207)\norientation // 'both' | 'horizontal' | 'vertical'\n) {\n  // 1) Geometry helpers\n\n  // ray‑cast point‑in‑polygon\n  function pointInPoly(x, y, vs) {\n    let inside = false;\n    for (let i = 0, j = vs.length - 1; i < vs.length; j = i++) {\n      const xi = vs[i].x,\n        yi = vs[i].y;\n      const xj = vs[j].x,\n        yj = vs[j].y;\n      const intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\n      if (intersect) inside = !inside;\n    }\n    return inside;\n  }\n\n  // distance from (px,py) to segment [(x1,y1)-(x2,y2)]\n  function ptSegDist(px, py, x1, y1, x2, y2) {\n    const A = px - x1,\n      B = py - y1;\n    const C = x2 - x1,\n      D = y2 - y1;\n    const dot = A * C + B * D;\n    const len2 = C * C + D * D;\n    let t = len2 !== 0 ? dot / len2 : -1;\n    let xx, yy;\n    if (t < 0) {\n      xx = x1;\n      yy = y1;\n    } else if (t > 1) {\n      xx = x2;\n      yy = y2;\n    } else {\n      xx = x1 + t * C;\n      yy = y1 + t * D;\n    }\n    const dx = px - xx,\n      dy = py - yy;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  // 2) Setup\n  const lengths = [...lengthsIn].sort((a, b) => b - a); // big→small\n  const placements = [];\n  const counts = {\n    4: 0,\n    2: 0,\n    1: 0\n  };\n\n  // 3) isValid: corners inside polygon, ≥margin from every edge, no overlap\n  function isValid(x, y, w, h) {\n    const corners = [{\n      x,\n      y\n    }, {\n      x: x + w,\n      y\n    }, {\n      x,\n      y: y + h\n    }, {\n      x: x + w,\n      y: y + h\n    }];\n\n    // a) all corners inside the original polygon\n    for (const c of corners) {\n      if (!pointInPoly(c.x, c.y, polygonPoints)) return false;\n    }\n\n    // b) every corner ≥ margin from every segment\n    for (const c of corners) {\n      for (let i = 0, j = polygonPoints.length - 1; i < polygonPoints.length; j = i++) {\n        const p1 = polygonPoints[i],\n          p2 = polygonPoints[j];\n        if (ptSegDist(c.x, c.y, p1.x, p1.y, p2.x, p2.y) < margin) {\n          return false;\n        }\n      }\n    }\n\n    // c) no overlap with any already‑placed tile\n    for (const t of placements) {\n      if (!(x + w <= t.x || t.x + t.width <= x || y + h <= t.y || t.y + t.height <= y)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // 4) Horizontal‑only packing: strips of height = tileW\n  function doHorizontal() {\n    // from y=margin up to zoneH–margin–tileW\n    for (let y = margin; y <= zoneH - margin - tileW + 1e-6; y += tileW) {\n      let x = margin;\n      // scan left→right\n      while (x <= zoneW - margin - lengths[lengths.length - 1] + 1e-6) {\n        let placed = false;\n        for (const L of lengths) {\n          if (x + L <= zoneW - margin + 1e-6 && isValid(x, y, L, tileW)) {\n            placements.push({\n              x,\n              y,\n              width: L,\n              height: tileW,\n              length: L\n            });\n            counts[L]++;\n            x += L; // advance by the **long** side\n            placed = true;\n            break;\n          }\n        }\n        if (!placed) {\n          // no tile fits here → skip ahead by one short‐side\n          x += tileW;\n        }\n      }\n    }\n  }\n\n  // 5) Vertical‑only packing: strips of width = tileW\n  function doVertical() {\n    for (let x = margin; x <= zoneW - margin - tileW + 1e-6; x += tileW) {\n      let y = margin;\n      while (y <= zoneH - margin - lengths[lengths.length - 1] + 1e-6) {\n        let placed = false;\n        for (const L of lengths) {\n          if (y + L <= zoneH - margin + 1e-6 && isValid(x, y, tileW, L)) {\n            placements.push({\n              x,\n              y,\n              width: tileW,\n              height: L,\n              length: L\n            });\n            counts[L]++;\n            y += L; // advance by the **long** side\n            placed = true;\n            break;\n          }\n        }\n        if (!placed) {\n          y += tileW;\n        }\n      }\n    }\n  }\n\n  // 6) Run the right modes\n  if (orientation === 'both' || orientation === 'horizontal') doHorizontal();\n  if (orientation === 'both' || orientation === 'vertical') doVertical();\n  return {\n    placements,\n    counts\n  };\n}","map":{"version":3,"names":["optimizeLayout","polygonPoints","zoneW","zoneH","lengthsIn","tileW","margin","orientation","pointInPoly","x","y","vs","inside","i","j","length","xi","yi","xj","yj","intersect","ptSegDist","px","py","x1","y1","x2","y2","A","B","C","D","dot","len2","t","xx","yy","dx","dy","Math","sqrt","lengths","sort","a","b","placements","counts","isValid","w","h","corners","c","p1","p2","width","height","doHorizontal","placed","L","push","doVertical"],"sources":["c:/New folder (2)/src/utils/optimizer.js"],"sourcesContent":["// src/utils/optimizer.js\r\n\r\n// Greedy, edge‑to‑edge packer that enforces a 207mm margin\r\nexport default function optimizeLayout(\r\n  polygonPoints,    // [{x,y},…] in meters\r\n  zoneW,            // bounding‑box width in m\r\n  zoneH,            // bounding‑box height in m\r\n  lengthsIn,        // e.g. [4,2,1]\r\n  tileW,            // short side of tile in m (1.26)\r\n  margin,           // clearance from walls in m (0.207)\r\n  orientation       // 'both' | 'horizontal' | 'vertical'\r\n) {\r\n  // 1) Geometry helpers\r\n\r\n  // ray‑cast point‑in‑polygon\r\n  function pointInPoly(x, y, vs) {\r\n    let inside = false;\r\n    for (let i = 0, j = vs.length - 1; i < vs.length; j = i++) {\r\n      const xi = vs[i].x, yi = vs[i].y;\r\n      const xj = vs[j].x, yj = vs[j].y;\r\n      const intersect =\r\n        (yi > y) !== (yj > y) &&\r\n        x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;\r\n      if (intersect) inside = !inside;\r\n    }\r\n    return inside;\r\n  }\r\n\r\n  // distance from (px,py) to segment [(x1,y1)-(x2,y2)]\r\n  function ptSegDist(px, py, x1, y1, x2, y2) {\r\n    const A = px - x1, B = py - y1;\r\n    const C = x2 - x1, D = y2 - y1;\r\n    const dot = A * C + B * D;\r\n    const len2 = C * C + D * D;\r\n    let t = len2 !== 0 ? dot / len2 : -1;\r\n    let xx, yy;\r\n    if (t < 0) { xx = x1; yy = y1; }\r\n    else if (t > 1) { xx = x2; yy = y2; }\r\n    else {\r\n      xx = x1 + t * C;\r\n      yy = y1 + t * D;\r\n    }\r\n    const dx = px - xx, dy = py - yy;\r\n    return Math.sqrt(dx*dx + dy*dy);\r\n  }\r\n\r\n  // 2) Setup\r\n  const lengths = [...lengthsIn].sort((a,b) => b - a); // big→small\r\n  const placements = [];\r\n  const counts = {4:0,2:0,1:0};\r\n\r\n  // 3) isValid: corners inside polygon, ≥margin from every edge, no overlap\r\n  function isValid(x, y, w, h) {\r\n    const corners = [\r\n      {x,y},\r\n      {x:x+w, y},\r\n      {x, y:y+h},\r\n      {x:x+w, y:y+h}\r\n    ];\r\n\r\n    // a) all corners inside the original polygon\r\n    for (const c of corners) {\r\n      if (!pointInPoly(c.x, c.y, polygonPoints)) return false;\r\n    }\r\n\r\n    // b) every corner ≥ margin from every segment\r\n    for (const c of corners) {\r\n      for (let i = 0, j = polygonPoints.length - 1; i < polygonPoints.length; j = i++) {\r\n        const p1 = polygonPoints[i], p2 = polygonPoints[j];\r\n        if (ptSegDist(c.x, c.y, p1.x, p1.y, p2.x, p2.y) < margin) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    // c) no overlap with any already‑placed tile\r\n    for (const t of placements) {\r\n      if (!(\r\n        x + w <= t.x ||\r\n        t.x + t.width <= x ||\r\n        y + h <= t.y ||\r\n        t.y + t.height <= y\r\n      )) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  // 4) Horizontal‑only packing: strips of height = tileW\r\n  function doHorizontal() {\r\n    // from y=margin up to zoneH–margin–tileW\r\n    for (let y = margin; y <= zoneH - margin - tileW + 1e-6; y += tileW) {\r\n      let x = margin;\r\n      // scan left→right\r\n      while (x <= zoneW - margin - lengths[lengths.length-1] + 1e-6) {\r\n        let placed = false;\r\n        for (const L of lengths) {\r\n          if (x + L <= zoneW - margin + 1e-6 && isValid(x, y, L, tileW)) {\r\n            placements.push({ x, y, width: L, height: tileW, length: L });\r\n            counts[L]++;\r\n            x += L;    // advance by the **long** side\r\n            placed = true;\r\n            break;\r\n          }\r\n        }\r\n        if (!placed) {\r\n          // no tile fits here → skip ahead by one short‐side\r\n          x += tileW;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // 5) Vertical‑only packing: strips of width = tileW\r\n  function doVertical() {\r\n    for (let x = margin; x <= zoneW - margin - tileW + 1e-6; x += tileW) {\r\n      let y = margin;\r\n      while (y <= zoneH - margin - lengths[lengths.length-1] + 1e-6) {\r\n        let placed = false;\r\n        for (const L of lengths) {\r\n          if (y + L <= zoneH - margin + 1e-6 && isValid(x, y, tileW, L)) {\r\n            placements.push({ x, y, width: tileW, height: L, length: L });\r\n            counts[L]++;\r\n            y += L;    // advance by the **long** side\r\n            placed = true;\r\n            break;\r\n          }\r\n        }\r\n        if (!placed) {\r\n          y += tileW;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // 6) Run the right modes\r\n  if (orientation === 'both' || orientation === 'horizontal') doHorizontal();\r\n  if (orientation === 'both' || orientation === 'vertical')   doVertical();\r\n\r\n  return { placements, counts };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}