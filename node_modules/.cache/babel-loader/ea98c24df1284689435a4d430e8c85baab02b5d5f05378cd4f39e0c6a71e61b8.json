{"ast":null,"code":"var _jsxFileName = \"c:\\\\New folder (2)\\\\src\\\\components\\\\LayoutCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as turf from '@turf/turf';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LayoutCanvas({\n  zoneW,\n  zoneH,\n  polygonPoints,\n  isPolygonClosed,\n  placements,\n  margin // in meters, e.g. 0.207\n}) {\n  _s();\n  const canvasRef = useRef(null);\n  const scale = 100; // 100px = 1m\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    canvas.width = zoneW * scale;\n    canvas.height = zoneH * scale;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // 1) draw original room polygon (unchanged)\n    if (polygonPoints.length) {\n      ctx.strokeStyle = '#0066CC';\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      polygonPoints.forEach((pt, i) => {\n        const x = pt.x * scale,\n          y = pt.y * scale;\n        i === 0 ? ctx.moveTo(x, y) : ctx.lineTo(x, y);\n      });\n      if (isPolygonClosed) ctx.closePath();\n      ctx.stroke();\n      polygonPoints.forEach(pt => {\n        ctx.fillStyle = '#CC0000';\n        ctx.beginPath();\n        ctx.arc(pt.x * scale, pt.y * scale, 4, 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    }\n\n    // 2) draw tiles\n    placements.forEach(tile => {\n      ctx.fillStyle = '#DDDDDD';\n      ctx.strokeStyle = '#333';\n      ctx.lineWidth = 1;\n      ctx.fillRect(tile.x * scale, tile.y * scale, tile.width * scale, tile.height * scale);\n      ctx.strokeRect(tile.x * scale, tile.y * scale, tile.width * scale, tile.height * scale);\n    });\n\n    // 3) build a turf MultiPolygon from all tiles\n    if (placements.length) {\n      const tilePolys = placements.map(t => {\n        const [x, y, w, h] = [t.x, t.y, t.width, t.height];\n        // rectangle as turf Polygon\n        return turf.polygon([[[x, y], [x + w, y], [x + w, y + h], [x, y + h], [x, y]]]);\n      });\n\n      // union them pairwise\n      let unionPoly = tilePolys[0];\n      for (let i = 1; i < tilePolys.length; i++) {\n        unionPoly = turf.union(unionPoly, tilePolys[i]);\n      }\n\n      // buffer outward by margin\n      const buffered = turf.buffer(unionPoly, margin, {\n        units: 'meters'\n      });\n\n      // draw the buffered polygon (could be MultiPolygon)\n      ctx.strokeStyle = '#FF0000';\n      ctx.lineWidth = 2;\n      ctx.setLineDash([6, 4]);\n      const geom = buffered.geometry;\n      const drawCoords = coords => coords.forEach(ring => {\n        ctx.beginPath();\n        ring.forEach(([px, py], j) => {\n          const X = px * scale,\n            Y = py * scale;\n          j === 0 ? ctx.moveTo(X, Y) : ctx.lineTo(X, Y);\n        });\n        ctx.closePath();\n        ctx.stroke();\n      });\n      if (geom.type === 'Polygon') {\n        drawCoords(geom.coordinates);\n      } else if (geom.type === 'MultiPolygon') {\n        geom.coordinates.forEach(poly => drawCoords(poly));\n      }\n      ctx.setLineDash([]);\n    }\n  }, [zoneW, zoneH, polygonPoints, isPolygonClosed, placements, margin]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      border: '1px solid #333',\n      marginTop: 20\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n}\n_s(LayoutCanvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = LayoutCanvas;\nvar _c;\n$RefreshReg$(_c, \"LayoutCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","turf","jsxDEV","_jsxDEV","LayoutCanvas","zoneW","zoneH","polygonPoints","isPolygonClosed","placements","margin","_s","canvasRef","scale","canvas","current","ctx","getContext","width","height","clearRect","length","strokeStyle","lineWidth","beginPath","forEach","pt","i","x","y","moveTo","lineTo","closePath","stroke","fillStyle","arc","Math","PI","fill","tile","fillRect","strokeRect","tilePolys","map","t","w","h","polygon","unionPoly","union","buffered","buffer","units","setLineDash","geom","geometry","drawCoords","coords","ring","px","py","j","X","Y","type","coordinates","poly","ref","style","border","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["c:/New folder (2)/src/components/LayoutCanvas.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as turf from '@turf/turf';\r\n\r\nexport default function LayoutCanvas({\r\n  zoneW,\r\n  zoneH,\r\n  polygonPoints,\r\n  isPolygonClosed,\r\n  placements,\r\n  margin // in meters, e.g. 0.207\r\n}) {\r\n  const canvasRef = useRef(null);\r\n  const scale = 100; // 100px = 1m\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n\r\n    canvas.width = zoneW * scale;\r\n    canvas.height = zoneH * scale;\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // 1) draw original room polygon (unchanged)\r\n    if (polygonPoints.length) {\r\n      ctx.strokeStyle = '#0066CC';\r\n      ctx.lineWidth = 2;\r\n      ctx.beginPath();\r\n      polygonPoints.forEach((pt, i) => {\r\n        const x = pt.x * scale, y = pt.y * scale;\r\n        i === 0 ? ctx.moveTo(x, y) : ctx.lineTo(x, y);\r\n      });\r\n      if (isPolygonClosed) ctx.closePath();\r\n      ctx.stroke();\r\n      polygonPoints.forEach(pt => {\r\n        ctx.fillStyle = '#CC0000';\r\n        ctx.beginPath();\r\n        ctx.arc(pt.x * scale, pt.y * scale, 4, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n      });\r\n    }\r\n\r\n    // 2) draw tiles\r\n    placements.forEach(tile => {\r\n      ctx.fillStyle = '#DDDDDD';\r\n      ctx.strokeStyle = '#333';\r\n      ctx.lineWidth = 1;\r\n      ctx.fillRect(\r\n        tile.x * scale,\r\n        tile.y * scale,\r\n        tile.width * scale,\r\n        tile.height * scale\r\n      );\r\n      ctx.strokeRect(\r\n        tile.x * scale,\r\n        tile.y * scale,\r\n        tile.width * scale,\r\n        tile.height * scale\r\n      );\r\n    });\r\n\r\n    // 3) build a turf MultiPolygon from all tiles\r\n    if (placements.length) {\r\n      const tilePolys = placements.map(t => {\r\n        const [x, y, w, h] = [t.x, t.y, t.width, t.height];\r\n        // rectangle as turf Polygon\r\n        return turf.polygon([[\r\n          [x, y],\r\n          [x + w, y],\r\n          [x + w, y + h],\r\n          [x, y + h],\r\n          [x, y]\r\n        ]]);\r\n      });\r\n\r\n      // union them pairwise\r\n      let unionPoly = tilePolys[0];\r\n      for (let i = 1; i < tilePolys.length; i++) {\r\n        unionPoly = turf.union(unionPoly, tilePolys[i]);\r\n      }\r\n\r\n      // buffer outward by margin\r\n      const buffered = turf.buffer(unionPoly, margin, { units: 'meters' });\r\n\r\n      // draw the buffered polygon (could be MultiPolygon)\r\n      ctx.strokeStyle = '#FF0000';\r\n      ctx.lineWidth = 2;\r\n      ctx.setLineDash([6, 4]);\r\n      const geom = buffered.geometry;\r\n      const drawCoords = coords =>\r\n        coords.forEach(ring => {\r\n          ctx.beginPath();\r\n          ring.forEach(([px, py], j) => {\r\n            const X = px * scale, Y = py * scale;\r\n            j === 0 ? ctx.moveTo(X, Y) : ctx.lineTo(X, Y);\r\n          });\r\n          ctx.closePath();\r\n          ctx.stroke();\r\n        });\r\n\r\n      if (geom.type === 'Polygon') {\r\n        drawCoords(geom.coordinates);\r\n      } else if (geom.type === 'MultiPolygon') {\r\n        geom.coordinates.forEach(poly => drawCoords(poly));\r\n      }\r\n      ctx.setLineDash([]);\r\n    }\r\n  }, [zoneW, zoneH, polygonPoints, isPolygonClosed, placements, margin]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      style={{ border: '1px solid #333', marginTop: 20 }}\r\n    />\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}