{"ast":null,"code":"import * as turf from '@turf/turf';\n\n/**\r\n * Greedy pack inside the polygon minus `margin`.\r\n */\nexport default function optimizeLayout(polygonPoints, lengthsIn, tileW, margin, orientation, startCorner) {\n  const coords = polygonPoints.map(p => [p.x, p.y]);\n  coords.push(coords[0]);\n  const room = turf.polygon([coords]);\n  const inner = turf.buffer(room, -margin, {\n    units: 'meters'\n  });\n  if (!inner || !inner.geometry) return {\n    placements: [],\n    counts: {\n      4: 0,\n      2: 0,\n      1: 0\n    }\n  };\n  const [minX, minY, maxX, maxY] = turf.bbox(inner);\n  const lengths = [...lengthsIn].sort((a, b) => b - a);\n  const minLen = lengths[lengths.length - 1];\n  const dir = {\n    'bottom-left': {\n      dx: +1,\n      dy: +1\n    },\n    'bottom-right': {\n      dx: -1,\n      dy: +1\n    },\n    'top-right': {\n      dx: -1,\n      dy: -1\n    },\n    'top-left': {\n      dx: +1,\n      dy: -1\n    }\n  }[startCorner];\n  const placements = [],\n    counts = {\n      4: 0,\n      2: 0,\n      1: 0\n    };\n  function fitsInside(x, y, w, h) {\n    const r = turf.polygon([[[x, y], [x + w, y], [x + w, y + h], [x, y + h], [x, y]]]);\n    return turf.booleanContains(inner, r);\n  }\n  const xStep = minLen * dir.dx;\n  const yStep = tileW * dir.dy;\n  function doHorizontal() {\n    for (let y = dir.dy > 0 ? minY : maxY - tileW; dir.dy > 0 ? y <= maxY - tileW : y >= minY; y += yStep) {\n      let x = dir.dx > 0 ? minX : maxX - minLen;\n      while (dir.dx > 0 ? x <= maxX - minLen : x >= minX) {\n        let placed = false;\n        for (const L of lengths) {\n          const px = dir.dx > 0 ? x : x - L;\n          if (fitsInside(px, y, L, tileW)) {\n            placements.push({\n              x: px,\n              y,\n              width: L,\n              height: tileW,\n              length: L\n            });\n            counts[L]++;\n            x += L * dir.dx;\n            placed = true;\n            break;\n          }\n        }\n        if (!placed) x += xStep;\n      }\n    }\n  }\n  function doVertical() {\n    for (let x = dir.dx > 0 ? minX : maxX - tileW; dir.dx > 0 ? x <= maxX - tileW : x >= minX; x += xStep) {\n      let y = dir.dy > 0 ? minY : maxY - minLen;\n      while (dir.dy > 0 ? y <= maxY - minLen : y >= minY) {\n        let placed = false;\n        for (const L of lengths) {\n          const py = dir.dy > 0 ? y : y - L;\n          if (fitsInside(x, py, tileW, L)) {\n            placements.push({\n              x,\n              y: py,\n              width: tileW,\n              height: L,\n              length: L\n            });\n            counts[L]++;\n            y += L * dir.dy;\n            placed = true;\n            break;\n          }\n        }\n        if (!placed) y += yStep;\n      }\n    }\n  }\n  if (orientation === 'both' || orientation === 'horizontal') doHorizontal();\n  if (orientation === 'both' || orientation === 'vertical') doVertical();\n  return {\n    placements,\n    counts\n  };\n}","map":{"version":3,"names":["turf","optimizeLayout","polygonPoints","lengthsIn","tileW","margin","orientation","startCorner","coords","map","p","x","y","push","room","polygon","inner","buffer","units","geometry","placements","counts","minX","minY","maxX","maxY","bbox","lengths","sort","a","b","minLen","length","dir","dx","dy","fitsInside","w","h","r","booleanContains","xStep","yStep","doHorizontal","placed","L","px","width","height","doVertical","py"],"sources":["c:/apps/src/utils/optimizer.js"],"sourcesContent":["import * as turf from '@turf/turf';\r\n\r\n/**\r\n * Greedy pack inside the polygon minus `margin`.\r\n */\r\nexport default function optimizeLayout(\r\n  polygonPoints,\r\n  lengthsIn,\r\n  tileW,\r\n  margin,\r\n  orientation,\r\n  startCorner\r\n) {\r\n  const coords = polygonPoints.map(p=>[p.x,p.y]); coords.push(coords[0]);\r\n  const room  = turf.polygon([coords]);\r\n  const inner = turf.buffer(room, -margin, {units:'meters'});\r\n  if (!inner || !inner.geometry) return {placements:[],counts:{4:0,2:0,1:0}};\r\n\r\n  const [minX,minY,maxX,maxY] = turf.bbox(inner);\r\n  const lengths = [...lengthsIn].sort((a,b)=>b-a);\r\n  const minLen  = lengths[lengths.length-1];\r\n\r\n  const dir = {\r\n    'bottom-left':  {dx:+1,dy:+1},\r\n    'bottom-right': {dx:-1,dy:+1},\r\n    'top-right':    {dx:-1,dy:-1},\r\n    'top-left':     {dx:+1,dy:-1}\r\n  }[startCorner];\r\n\r\n  const placements = [], counts = {4:0,2:0,1:0};\r\n\r\n  function fitsInside(x,y,w,h) {\r\n    const r = turf.polygon([[\r\n      [x,y],[x+w,y],[x+w,y+h],[x,y+h],[x,y]\r\n    ]]);\r\n    return turf.booleanContains(inner, r);\r\n  }\r\n\r\n  const xStep = minLen * dir.dx;\r\n  const yStep = tileW  * dir.dy;\r\n\r\n  function doHorizontal() {\r\n    for (let y=dir.dy>0?minY:maxY-tileW;\r\n         dir.dy>0? y<=maxY-tileW : y>=minY;\r\n         y+=yStep) {\r\n      let x = dir.dx>0?minX:maxX-minLen;\r\n      while (dir.dx>0? x<=maxX-minLen : x>=minX) {\r\n        let placed=false;\r\n        for (const L of lengths) {\r\n          const px = dir.dx>0? x : x-L;\r\n          if (fitsInside(px,y,L,tileW)) {\r\n            placements.push({x:px,y,width:L,height:tileW,length:L});\r\n            counts[L]++; x+=L*dir.dx; placed=true; break;\r\n          }\r\n        }\r\n        if(!placed) x+=xStep;\r\n      }\r\n    }\r\n  }\r\n\r\n  function doVertical() {\r\n    for (let x=dir.dx>0?minX:maxX-tileW;\r\n         dir.dx>0? x<=maxX-tileW : x>=minX;\r\n         x+=xStep) {\r\n      let y = dir.dy>0?minY:maxY-minLen;\r\n      while (dir.dy>0? y<=maxY-minLen : y>=minY) {\r\n        let placed=false;\r\n        for (const L of lengths) {\r\n          const py = dir.dy>0? y : y-L;\r\n          if (fitsInside(x,py,tileW,L)) {\r\n            placements.push({x,y:py,width:tileW,height:L,length:L});\r\n            counts[L]++; y+=L*dir.dy; placed=true; break;\r\n          }\r\n        }\r\n        if(!placed) y+=yStep;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (orientation==='both' || orientation==='horizontal') doHorizontal();\r\n  if (orientation==='both' || orientation==='vertical')   doVertical();\r\n\r\n  return {placements,counts};\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}