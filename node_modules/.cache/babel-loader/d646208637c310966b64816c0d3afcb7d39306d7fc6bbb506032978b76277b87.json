{"ast":null,"code":"var _jsxFileName = \"c:\\\\apps\\\\src\\\\components\\\\LayoutCanvas.js\",\n  _s = $RefreshSig$();\n// src/components/LayoutCanvas.js\n\nimport React, { useRef, useEffect, useMemo, useState } from 'react';\nimport * as turf from '@turf/turf';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LayoutCanvas({\n  zoneW,\n  zoneH,\n  polygonPoints,\n  closed,\n  placements,\n  setPlacements,\n  margin // in meters, e.g. 0.207\n}) {\n  _s();\n  const canvasRef = useRef();\n  const [dragging, setDragging] = useState(null);\n  const scale = 100; // px per meter\n  const snapTol = 0.05; // 5 cm snap tolerance\n\n  // 1) Build the inward‐buffered polygon (green boundary) once\n  const innerPoly = useMemo(() => {\n    if (!closed || polygonPoints.length < 3) return null;\n    const coords = polygonPoints.map(p => [p.x, p.y]);\n    coords.push(coords[0]);\n    const room = turf.polygon([coords]);\n    // high‐resolution inward buffer\n    const shrunk = turf.buffer(room, -margin, {\n      units: 'meters',\n      steps: 128\n    });\n    return shrunk && shrunk.geometry ? shrunk : null;\n  }, [polygonPoints, closed, margin]);\n\n  // 2) Test containment of tile in innerPoly\n  function fitsInside(x, y, w, h) {\n    if (!innerPoly) return false;\n    const rect = turf.polygon([[[x, y], [x + w, y], [x + w, y + h], [x, y + h], [x, y]]]);\n    return turf.booleanContains(innerPoly, rect);\n  }\n\n  // 3) Snapping to other tiles\n  function applySnap(idx, x, y, w, h) {\n    placements.forEach((t, j) => {\n      if (j === idx) return;\n      // vertical edges\n      [[t.x], [t.x + t.width]].forEach(([sx]) => {\n        if (Math.abs(x - sx) < snapTol) x = sx;\n        if (Math.abs(x + w - sx) < snapTol) x = sx - w;\n      });\n      // horizontal edges\n      [[t.y], [t.y + t.height]].forEach(([sy]) => {\n        if (Math.abs(y - sy) < snapTol) y = sy;\n        if (Math.abs(y + h - sy) < snapTol) y = sy - h;\n      });\n    });\n    return {\n      x,\n      y\n    };\n  }\n\n  // 4) Drag & drop logic\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    function toTile(e) {\n      const r = canvas.getBoundingClientRect();\n      return {\n        mx: (e.clientX - r.left) / scale,\n        my: (e.clientY - r.top) / scale\n      };\n    }\n    function onDown(e) {\n      const {\n        mx,\n        my\n      } = toTile(e);\n      for (let i = placements.length - 1; i >= 0; i--) {\n        const t = placements[i];\n        if (mx >= t.x && mx <= t.x + t.width && my >= t.y && my <= t.y + t.height) {\n          setDragging({\n            idx: i,\n            offsetX: mx - t.x,\n            offsetY: my - t.y\n          });\n          return;\n        }\n      }\n    }\n    function onMove(e) {\n      if (!dragging) return;\n      const {\n        mx,\n        my\n      } = toTile(e);\n      const {\n        idx,\n        offsetX,\n        offsetY\n      } = dragging;\n      const t = placements[idx];\n      let nx = mx - offsetX;\n      let ny = my - offsetY;\n      ({\n        x: nx,\n        y: ny\n      } = applySnap(idx, nx, ny, t.width, t.height));\n      if (fitsInside(nx, ny, t.width, t.height)) {\n        const np = [...placements];\n        np[idx] = {\n          ...t,\n          x: nx,\n          y: ny\n        };\n        setPlacements(np);\n      }\n    }\n    function onUp() {\n      if (dragging) setDragging(null);\n    }\n    canvas.addEventListener('mousedown', onDown);\n    window.addEventListener('mousemove', onMove);\n    window.addEventListener('mouseup', onUp);\n    return () => {\n      canvas.removeEventListener('mousedown', onDown);\n      window.removeEventListener('mousemove', onMove);\n      window.removeEventListener('mouseup', onUp);\n    };\n  }, [dragging, placements, innerPoly]);\n\n  // 5) Drawing routine\n  useEffect(() => {\n    const c = canvasRef.current;\n    const ctx = c.getContext('2d');\n    c.width = zoneW * scale;\n    c.height = zoneH * scale;\n    ctx.clearRect(0, 0, c.width, c.height);\n\n    // Polygon outline + vertices\n    if (polygonPoints.length) {\n      ctx.strokeStyle = '#0066CC';\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      polygonPoints.forEach((p, i) => {\n        const X = p.x * scale,\n          Y = p.y * scale;\n        i === 0 ? ctx.moveTo(X, Y) : ctx.lineTo(X, Y);\n      });\n      if (closed) ctx.closePath();\n      ctx.stroke();\n      ctx.fillStyle = '#0066CC';\n      polygonPoints.forEach(p => {\n        ctx.beginPath();\n        ctx.arc(p.x * scale, p.y * scale, 4, 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    }\n\n    // Tiles\n    placements.forEach(t => {\n      const x = t.x * scale,\n        y = t.y * scale;\n      const w = t.width * scale,\n        h = t.height * scale;\n      ctx.fillStyle = '#DDD';\n      ctx.strokeStyle = '#333';\n      ctx.lineWidth = 1;\n      ctx.fillRect(x, y, w, h);\n      ctx.strokeRect(x, y, w, h);\n    });\n    if (!closed || placements.length === 0) return;\n\n    // Green boundary: inward‐buffer of polygon\n    if (innerPoly) {\n      ctx.strokeStyle = 'green';\n      ctx.setLineDash([4, 2]);\n      ctx.lineWidth = 2;\n      const g = innerPoly.geometry;\n      const draw = ring => {\n        ctx.beginPath();\n        ring.forEach(([px, py], i) => {\n          const X = px * scale,\n            Y = py * scale;\n          i === 0 ? ctx.moveTo(X, Y) : ctx.lineTo(X, Y);\n        });\n        ctx.closePath();\n        ctx.stroke();\n      };\n      if (g.type === 'Polygon') {\n        draw(g.coordinates[0]);\n      } else {\n        g.coordinates.forEach(poly => draw(poly[0]));\n      }\n      ctx.setLineDash([]);\n    }\n\n    // Red boundary: outward buffer of tile union, clipped inside innerPoly\n    let union = null;\n    placements.forEach(t => {\n      const poly = turf.polygon([[[t.x, t.y], [t.x + t.width, t.y], [t.x + t.width, t.y + t.height], [t.x, t.y + t.height], [t.x, t.y]]]);\n      union = union ? turf.union(union, poly) : poly;\n    });\n    let redBuf = turf.buffer(union, margin, {\n      units: 'meters'\n    });\n    if (innerPoly) {\n      const clipPoly = turf.polygon(innerPoly.geometry.coordinates);\n      const inter = turf.intersect(redBuf, clipPoly);\n      if (inter) redBuf = inter;\n    }\n    ctx.strokeStyle = 'red';\n    ctx.setLineDash([6, 4]);\n    ctx.lineWidth = 2;\n    const rg = redBuf.geometry;\n    const draw2 = ring => {\n      ctx.beginPath();\n      ring.forEach(([px, py], i) => {\n        const X = px * scale,\n          Y = py * scale;\n        i === 0 ? ctx.moveTo(X, Y) : ctx.lineTo(X, Y);\n      });\n      ctx.closePath();\n      ctx.stroke();\n    };\n    if (rg.type === 'Polygon') {\n      draw2(rg.coordinates[0]);\n    } else {\n      rg.coordinates.forEach(poly => draw2(poly[0]));\n    }\n    ctx.setLineDash([]);\n  }, [zoneW, zoneH, polygonPoints, closed, placements, innerPoly, margin]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      border: '1px solid #333',\n      cursor: dragging ? 'grabbing' : 'grab',\n      marginTop: 20\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, this);\n}\n_s(LayoutCanvas, \"kiaGtzYXKhKNH9EKMth3WvM/eXA=\");\n_c = LayoutCanvas;\nvar _c;\n$RefreshReg$(_c, \"LayoutCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useMemo","useState","turf","jsxDEV","_jsxDEV","LayoutCanvas","zoneW","zoneH","polygonPoints","closed","placements","setPlacements","margin","_s","canvasRef","dragging","setDragging","scale","snapTol","innerPoly","length","coords","map","p","x","y","push","room","polygon","shrunk","buffer","units","steps","geometry","fitsInside","w","h","rect","booleanContains","applySnap","idx","forEach","t","j","width","sx","Math","abs","height","sy","canvas","current","toTile","e","r","getBoundingClientRect","mx","clientX","left","my","clientY","top","onDown","i","offsetX","offsetY","onMove","nx","ny","np","onUp","addEventListener","window","removeEventListener","c","ctx","getContext","clearRect","strokeStyle","lineWidth","beginPath","X","Y","moveTo","lineTo","closePath","stroke","fillStyle","arc","PI","fill","fillRect","strokeRect","setLineDash","g","draw","ring","px","py","type","coordinates","poly","union","redBuf","clipPoly","inter","intersect","rg","draw2","ref","style","border","cursor","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["c:/apps/src/components/LayoutCanvas.js"],"sourcesContent":["// src/components/LayoutCanvas.js\r\n\r\nimport React, { useRef, useEffect, useMemo, useState } from 'react';\r\nimport * as turf from '@turf/turf';\r\n\r\nexport default function LayoutCanvas({\r\n  zoneW,\r\n  zoneH,\r\n  polygonPoints,\r\n  closed,\r\n  placements,\r\n  setPlacements,\r\n  margin  // in meters, e.g. 0.207\r\n}) {\r\n  const canvasRef = useRef();\r\n  const [dragging, setDragging] = useState(null);\r\n  const scale = 100;    // px per meter\r\n  const snapTol = 0.05; // 5 cm snap tolerance\r\n\r\n  // 1) Build the inward‐buffered polygon (green boundary) once\r\n  const innerPoly = useMemo(() => {\r\n    if (!closed || polygonPoints.length < 3) return null;\r\n    const coords = polygonPoints.map(p => [p.x, p.y]);\r\n    coords.push(coords[0]);\r\n    const room = turf.polygon([coords]);\r\n    // high‐resolution inward buffer\r\n    const shrunk = turf.buffer(room, -margin, {\r\n      units: 'meters',\r\n      steps: 128\r\n    });\r\n    return shrunk && shrunk.geometry ? shrunk : null;\r\n  }, [polygonPoints, closed, margin]);\r\n\r\n  // 2) Test containment of tile in innerPoly\r\n  function fitsInside(x, y, w, h) {\r\n    if (!innerPoly) return false;\r\n    const rect = turf.polygon([[\r\n      [x,     y],\r\n      [x + w, y],\r\n      [x + w, y + h],\r\n      [x,     y + h],\r\n      [x,     y]\r\n    ]]);\r\n    return turf.booleanContains(innerPoly, rect);\r\n  }\r\n\r\n  // 3) Snapping to other tiles\r\n  function applySnap(idx, x, y, w, h) {\r\n    placements.forEach((t, j) => {\r\n      if (j === idx) return;\r\n      // vertical edges\r\n      [[t.x], [t.x + t.width]].forEach(([sx]) => {\r\n        if (Math.abs(x - sx) < snapTol) x = sx;\r\n        if (Math.abs(x + w - sx) < snapTol) x = sx - w;\r\n      });\r\n      // horizontal edges\r\n      [[t.y], [t.y + t.height]].forEach(([sy]) => {\r\n        if (Math.abs(y - sy) < snapTol) y = sy;\r\n        if (Math.abs(y + h - sy) < snapTol) y = sy - h;\r\n      });\r\n    });\r\n    return { x, y };\r\n  }\r\n\r\n  // 4) Drag & drop logic\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    function toTile(e) {\r\n      const r = canvas.getBoundingClientRect();\r\n      return {\r\n        mx: (e.clientX - r.left) / scale,\r\n        my: (e.clientY - r.top)  / scale\r\n      };\r\n    }\r\n    function onDown(e) {\r\n      const { mx, my } = toTile(e);\r\n      for (let i = placements.length - 1; i >= 0; i--) {\r\n        const t = placements[i];\r\n        if (\r\n          mx >= t.x && mx <= t.x + t.width &&\r\n          my >= t.y && my <= t.y + t.height\r\n        ) {\r\n          setDragging({ idx: i, offsetX: mx - t.x, offsetY: my - t.y });\r\n          return;\r\n        }\r\n      }\r\n    }\r\n    function onMove(e) {\r\n      if (!dragging) return;\r\n      const { mx, my } = toTile(e);\r\n      const { idx, offsetX, offsetY } = dragging;\r\n      const t = placements[idx];\r\n      let nx = mx - offsetX;\r\n      let ny = my - offsetY;\r\n      ({ x: nx, y: ny } = applySnap(idx, nx, ny, t.width, t.height));\r\n      if (fitsInside(nx, ny, t.width, t.height)) {\r\n        const np = [...placements];\r\n        np[idx] = { ...t, x: nx, y: ny };\r\n        setPlacements(np);\r\n      }\r\n    }\r\n    function onUp() {\r\n      if (dragging) setDragging(null);\r\n    }\r\n    canvas.addEventListener('mousedown', onDown);\r\n    window.addEventListener('mousemove', onMove);\r\n    window.addEventListener('mouseup', onUp);\r\n    return () => {\r\n      canvas.removeEventListener('mousedown', onDown);\r\n      window.removeEventListener('mousemove', onMove);\r\n      window.removeEventListener('mouseup', onUp);\r\n    };\r\n  }, [dragging, placements, innerPoly]);\r\n\r\n  // 5) Drawing routine\r\n  useEffect(() => {\r\n    const c = canvasRef.current;\r\n    const ctx = c.getContext('2d');\r\n    c.width  = zoneW * scale;\r\n    c.height = zoneH * scale;\r\n    ctx.clearRect(0, 0, c.width, c.height);\r\n\r\n    // Polygon outline + vertices\r\n    if (polygonPoints.length) {\r\n      ctx.strokeStyle = '#0066CC'; ctx.lineWidth = 2;\r\n      ctx.beginPath();\r\n      polygonPoints.forEach((p, i) => {\r\n        const X = p.x * scale, Y = p.y * scale;\r\n        i===0 ? ctx.moveTo(X,Y) : ctx.lineTo(X,Y);\r\n      });\r\n      if (closed) ctx.closePath();\r\n      ctx.stroke();\r\n      ctx.fillStyle = '#0066CC';\r\n      polygonPoints.forEach(p => {\r\n        ctx.beginPath();\r\n        ctx.arc(p.x*scale, p.y*scale, 4, 0, 2*Math.PI);\r\n        ctx.fill();\r\n      });\r\n    }\r\n\r\n    // Tiles\r\n    placements.forEach(t => {\r\n      const x = t.x * scale, y = t.y * scale;\r\n      const w = t.width * scale, h = t.height * scale;\r\n      ctx.fillStyle   = '#DDD';\r\n      ctx.strokeStyle = '#333';\r\n      ctx.lineWidth   = 1;\r\n      ctx.fillRect(x, y, w, h);\r\n      ctx.strokeRect(x, y, w, h);\r\n    });\r\n\r\n    if (!closed || placements.length === 0) return;\r\n\r\n    // Green boundary: inward‐buffer of polygon\r\n    if (innerPoly) {\r\n      ctx.strokeStyle = 'green';\r\n      ctx.setLineDash([4,2]);\r\n      ctx.lineWidth = 2;\r\n      const g = innerPoly.geometry;\r\n      const draw = ring => {\r\n        ctx.beginPath();\r\n        ring.forEach(([px,py], i) => {\r\n          const X = px*scale, Y = py*scale;\r\n          i===0 ? ctx.moveTo(X,Y) : ctx.lineTo(X,Y);\r\n        });\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n      };\r\n      if (g.type === 'Polygon') {\r\n        draw(g.coordinates[0]);\r\n      } else {\r\n        g.coordinates.forEach(poly=>draw(poly[0]));\r\n      }\r\n      ctx.setLineDash([]);\r\n    }\r\n\r\n    // Red boundary: outward buffer of tile union, clipped inside innerPoly\r\n    let union = null;\r\n    placements.forEach(t => {\r\n      const poly = turf.polygon([[\r\n        [t.x, t.y],\r\n        [t.x+t.width, t.y],\r\n        [t.x+t.width, t.y+t.height],\r\n        [t.x, t.y+t.height],\r\n        [t.x, t.y]\r\n      ]]);\r\n      union = union ? turf.union(union, poly) : poly;\r\n    });\r\n    let redBuf = turf.buffer(union, margin, { units:'meters' });\r\n    if (innerPoly) {\r\n      const clipPoly = turf.polygon(innerPoly.geometry.coordinates);\r\n      const inter = turf.intersect(redBuf, clipPoly);\r\n      if (inter) redBuf = inter;\r\n    }\r\n\r\n    ctx.strokeStyle = 'red';\r\n    ctx.setLineDash([6,4]);\r\n    ctx.lineWidth = 2;\r\n    const rg = redBuf.geometry;\r\n    const draw2 = ring => {\r\n      ctx.beginPath();\r\n      ring.forEach(([px,py], i) => {\r\n        const X=px*scale, Y=py*scale;\r\n        i===0 ? ctx.moveTo(X,Y) : ctx.lineTo(X,Y);\r\n      });\r\n      ctx.closePath();\r\n      ctx.stroke();\r\n    };\r\n    if (rg.type === 'Polygon') {\r\n      draw2(rg.coordinates[0]);\r\n    } else {\r\n      rg.coordinates.forEach(poly=>draw2(poly[0]));\r\n    }\r\n    ctx.setLineDash([]);\r\n\r\n  }, [zoneW, zoneH, polygonPoints, closed, placements, innerPoly, margin]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      style={{\r\n        border: '1px solid #333',\r\n        cursor: dragging ? 'grabbing' : 'grab',\r\n        marginTop: 20\r\n      }}\r\n    />\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}