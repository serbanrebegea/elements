{"ast":null,"code":"var _jsxFileName = \"c:\\\\apps\\\\src\\\\components\\\\LayoutCanvas.js\",\n  _s = $RefreshSig$();\n// src/components/LayoutCanvas.js\nimport React, { useRef, useEffect } from 'react';\nimport * as turf from '@turf/turf';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LayoutCanvas({\n  zoneW,\n  zoneH,\n  polygonPoints,\n  closed,\n  placements,\n  margin // in meters (e.g. 0.207)\n}) {\n  _s();\n  const ref = useRef();\n  const scale = 100; // px per meter\n\n  useEffect(() => {\n    const c = ref.current;\n    const ctx = c.getContext('2d');\n    c.width = zoneW * scale;\n    c.height = zoneH * scale;\n    ctx.clearRect(0, 0, c.width, c.height);\n\n    // 1) Draw polygon + vertices\n    if (polygonPoints.length) {\n      ctx.strokeStyle = '#0066CC';\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      polygonPoints.forEach((p, i) => {\n        const X = p.x * scale,\n          Y = p.y * scale;\n        i === 0 ? ctx.moveTo(X, Y) : ctx.lineTo(X, Y);\n      });\n      if (closed) ctx.closePath();\n      ctx.stroke();\n      ctx.fillStyle = '#0066CC';\n      polygonPoints.forEach(p => {\n        ctx.beginPath();\n        ctx.arc(p.x * scale, p.y * scale, 4, 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    }\n    if (!closed || placements.length === 0) return;\n\n    // 2) Build union of tile rects\n    let unionPoly = null;\n    placements.forEach(t => {\n      const poly = turf.polygon([[[t.x, t.y], [t.x + t.width, t.y], [t.x + t.width, t.y + t.height], [t.x, t.y + t.height], [t.x, t.y]]]);\n      unionPoly = unionPoly ? turf.union(unionPoly, poly) : poly;\n    });\n\n    // 3) Draw tiles\n    placements.forEach(t => {\n      const x = t.x * scale,\n        y = t.y * scale;\n      const w = t.width * scale,\n        h = t.height * scale;\n      ctx.fillStyle = '#DDD';\n      ctx.strokeStyle = '#333';\n      ctx.lineWidth = 1;\n      ctx.fillRect(x, y, w, h);\n      ctx.strokeRect(x, y, w, h);\n    });\n\n    // 4) Draw full tile‐buffer\n    const tileBuffer = turf.buffer(unionPoly, margin, {\n      units: 'meters'\n    });\n    ctx.strokeStyle = '#F00';\n    ctx.setLineDash([6, 4]);\n    ctx.lineWidth = 2;\n    const drawRing = ring => {\n      ctx.beginPath();\n      ring.forEach(([px, py], i) => {\n        const X = px * scale,\n          Y = py * scale;\n        i === 0 ? ctx.moveTo(X, Y) : ctx.lineTo(X, Y);\n      });\n      ctx.closePath();\n      ctx.stroke();\n    };\n    const tbGeom = tileBuffer.geometry;\n    if (tbGeom.type === 'Polygon') {\n      drawRing(tbGeom.coordinates[0]);\n    } else {\n      tbGeom.coordinates.forEach(poly => drawRing(poly[0]));\n    }\n\n    // prepare for gap tests\n    // convert unionPoly to a LineString for distance checks\n    const unionEdges = turf.polygonToLine(unionPoly);\n\n    // 5) For each polygon edge, test gap and, if < margin, draw polygon‐offset\n    polygonPoints.forEach((p, i) => {\n      const q = polygonPoints[(i + 1) % polygonPoints.length];\n\n      // midpoint\n      const mx = (p.x + q.x) / 2;\n      const my = (p.y + q.y) / 2;\n\n      // measure gap: pointToLineDistance from midpoint to union edges\n      const gap = turf.pointToLineDistance(turf.point([mx, my]), unionEdges, {\n        units: 'meters'\n      });\n      if (gap < margin - 1e-6) {\n        // draw the polygon‐offset segment for this edge\n        // edge vector\n        const dx = q.x - p.x,\n          dy = q.y - p.y;\n        const len = Math.hypot(dx, dy);\n        // interior normal (CCW polygon assumed)\n        let nx = -dy / len,\n          ny = dx / len;\n        // if polygon is CW, flip\n        let area2 = 0;\n        polygonPoints.forEach((r, j) => {\n          const s = polygonPoints[(j + 1) % polygonPoints.length];\n          area2 += r.x * s.y - s.x * r.y;\n        });\n        if (area2 < 0) {\n          nx = -nx;\n          ny = -ny;\n        }\n\n        // offset endpoints\n        const px = (p.x + nx * margin) * scale;\n        const py = (p.y + ny * margin) * scale;\n        const qx = (q.x + nx * margin) * scale;\n        const qy = (q.y + ny * margin) * scale;\n        ctx.beginPath();\n        ctx.moveTo(px, py);\n        ctx.lineTo(qx, qy);\n        ctx.stroke();\n      }\n    });\n    ctx.setLineDash([]);\n  }, [zoneW, zoneH, polygonPoints, closed, placements, margin]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: ref,\n    style: {\n      border: '1px solid #333',\n      marginTop: 20\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n}\n_s(LayoutCanvas, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n_c = LayoutCanvas;\nvar _c;\n$RefreshReg$(_c, \"LayoutCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","turf","jsxDEV","_jsxDEV","LayoutCanvas","zoneW","zoneH","polygonPoints","closed","placements","margin","_s","ref","scale","c","current","ctx","getContext","width","height","clearRect","length","strokeStyle","lineWidth","beginPath","forEach","p","i","X","x","Y","y","moveTo","lineTo","closePath","stroke","fillStyle","arc","Math","PI","fill","unionPoly","t","poly","polygon","union","w","h","fillRect","strokeRect","tileBuffer","buffer","units","setLineDash","drawRing","ring","px","py","tbGeom","geometry","type","coordinates","unionEdges","polygonToLine","q","mx","my","gap","pointToLineDistance","point","dx","dy","len","hypot","nx","ny","area2","r","j","s","qx","qy","style","border","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["c:/apps/src/components/LayoutCanvas.js"],"sourcesContent":["// src/components/LayoutCanvas.js\r\nimport React, { useRef, useEffect } from 'react';\r\nimport * as turf from '@turf/turf';\r\n\r\nexport default function LayoutCanvas({\r\n  zoneW,\r\n  zoneH,\r\n  polygonPoints,\r\n  closed,\r\n  placements,\r\n  margin  // in meters (e.g. 0.207)\r\n}) {\r\n  const ref = useRef();\r\n  const scale = 100; // px per meter\r\n\r\n  useEffect(() => {\r\n    const c = ref.current;\r\n    const ctx = c.getContext('2d');\r\n    c.width  = zoneW * scale;\r\n    c.height = zoneH * scale;\r\n    ctx.clearRect(0, 0, c.width, c.height);\r\n\r\n    // 1) Draw polygon + vertices\r\n    if (polygonPoints.length) {\r\n      ctx.strokeStyle = '#0066CC';\r\n      ctx.lineWidth = 2;\r\n      ctx.beginPath();\r\n      polygonPoints.forEach((p, i) => {\r\n        const X = p.x * scale, Y = p.y * scale;\r\n        i === 0 ? ctx.moveTo(X, Y) : ctx.lineTo(X, Y);\r\n      });\r\n      if (closed) ctx.closePath();\r\n      ctx.stroke();\r\n\r\n      ctx.fillStyle = '#0066CC';\r\n      polygonPoints.forEach(p => {\r\n        ctx.beginPath();\r\n        ctx.arc(p.x * scale, p.y * scale, 4, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n      });\r\n    }\r\n\r\n    if (!closed || placements.length === 0) return;\r\n\r\n    // 2) Build union of tile rects\r\n    let unionPoly = null;\r\n    placements.forEach(t => {\r\n      const poly = turf.polygon([[\r\n        [t.x,            t.y],\r\n        [t.x + t.width,  t.y],\r\n        [t.x + t.width,  t.y + t.height],\r\n        [t.x,            t.y + t.height],\r\n        [t.x,            t.y]\r\n      ]]);\r\n      unionPoly = unionPoly ? turf.union(unionPoly, poly) : poly;\r\n    });\r\n\r\n    // 3) Draw tiles\r\n    placements.forEach(t => {\r\n      const x = t.x * scale, y = t.y * scale;\r\n      const w = t.width * scale, h = t.height * scale;\r\n      ctx.fillStyle   = '#DDD';\r\n      ctx.strokeStyle = '#333';\r\n      ctx.lineWidth   = 1;\r\n      ctx.fillRect(x, y, w, h);\r\n      ctx.strokeRect(x, y, w, h);\r\n    });\r\n\r\n    // 4) Draw full tile‐buffer\r\n    const tileBuffer = turf.buffer(unionPoly, margin, { units:'meters' });\r\n    ctx.strokeStyle = '#F00';\r\n    ctx.setLineDash([6,4]);\r\n    ctx.lineWidth = 2;\r\n\r\n    const drawRing = ring => {\r\n      ctx.beginPath();\r\n      ring.forEach(([px,py], i) => {\r\n        const X = px * scale, Y = py * scale;\r\n        i===0 ? ctx.moveTo(X,Y) : ctx.lineTo(X,Y);\r\n      });\r\n      ctx.closePath();\r\n      ctx.stroke();\r\n    };\r\n\r\n    const tbGeom = tileBuffer.geometry;\r\n    if (tbGeom.type==='Polygon') {\r\n      drawRing(tbGeom.coordinates[0]);\r\n    } else {\r\n      tbGeom.coordinates.forEach(poly=>drawRing(poly[0]));\r\n    }\r\n\r\n    // prepare for gap tests\r\n    // convert unionPoly to a LineString for distance checks\r\n    const unionEdges = turf.polygonToLine(unionPoly);\r\n\r\n    // 5) For each polygon edge, test gap and, if < margin, draw polygon‐offset\r\n    polygonPoints.forEach((p, i) => {\r\n      const q = polygonPoints[(i+1) % polygonPoints.length];\r\n\r\n      // midpoint\r\n      const mx = (p.x + q.x)/2;\r\n      const my = (p.y + q.y)/2;\r\n\r\n      // measure gap: pointToLineDistance from midpoint to union edges\r\n      const gap = turf.pointToLineDistance(\r\n        turf.point([mx, my]),\r\n        unionEdges,\r\n        { units: 'meters' }\r\n      );\r\n\r\n      if (gap < margin - 1e-6) {\r\n        // draw the polygon‐offset segment for this edge\r\n        // edge vector\r\n        const dx = q.x - p.x, dy = q.y - p.y;\r\n        const len = Math.hypot(dx, dy);\r\n        // interior normal (CCW polygon assumed)\r\n        let nx = -dy/len, ny = dx/len;\r\n        // if polygon is CW, flip\r\n        let area2 = 0;\r\n        polygonPoints.forEach((r,j) => {\r\n          const s = polygonPoints[(j+1)%polygonPoints.length];\r\n          area2 += r.x*s.y - s.x*r.y;\r\n        });\r\n        if (area2 < 0) { nx = -nx; ny = -ny; }\r\n\r\n        // offset endpoints\r\n        const px = (p.x + nx*margin) * scale;\r\n        const py = (p.y + ny*margin) * scale;\r\n        const qx = (q.x + nx*margin) * scale;\r\n        const qy = (q.y + ny*margin) * scale;\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(px, py);\r\n        ctx.lineTo(qx, qy);\r\n        ctx.stroke();\r\n      }\r\n    });\r\n\r\n    ctx.setLineDash([]);\r\n  }, [\r\n    zoneW, zoneH,\r\n    polygonPoints, closed,\r\n    placements, margin\r\n  ]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={ref}\r\n      style={{ border:'1px solid #333', marginTop:20 }}\r\n    />\r\n  );\r\n}\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAChD,OAAO,KAAKC,IAAI,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,eAAe,SAASC,YAAYA,CAAC;EACnCC,KAAK;EACLC,KAAK;EACLC,aAAa;EACbC,MAAM;EACNC,UAAU;EACVC,MAAM,CAAE;AACV,CAAC,EAAE;EAAAC,EAAA;EACD,MAAMC,GAAG,GAAGb,MAAM,CAAC,CAAC;EACpB,MAAMc,KAAK,GAAG,GAAG,CAAC,CAAC;;EAEnBb,SAAS,CAAC,MAAM;IACd,MAAMc,CAAC,GAAGF,GAAG,CAACG,OAAO;IACrB,MAAMC,GAAG,GAAGF,CAAC,CAACG,UAAU,CAAC,IAAI,CAAC;IAC9BH,CAAC,CAACI,KAAK,GAAIb,KAAK,GAAGQ,KAAK;IACxBC,CAAC,CAACK,MAAM,GAAGb,KAAK,GAAGO,KAAK;IACxBG,GAAG,CAACI,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEN,CAAC,CAACI,KAAK,EAAEJ,CAAC,CAACK,MAAM,CAAC;;IAEtC;IACA,IAAIZ,aAAa,CAACc,MAAM,EAAE;MACxBL,GAAG,CAACM,WAAW,GAAG,SAAS;MAC3BN,GAAG,CAACO,SAAS,GAAG,CAAC;MACjBP,GAAG,CAACQ,SAAS,CAAC,CAAC;MACfjB,aAAa,CAACkB,OAAO,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QAC9B,MAAMC,CAAC,GAAGF,CAAC,CAACG,CAAC,GAAGhB,KAAK;UAAEiB,CAAC,GAAGJ,CAAC,CAACK,CAAC,GAAGlB,KAAK;QACtCc,CAAC,KAAK,CAAC,GAAGX,GAAG,CAACgB,MAAM,CAACJ,CAAC,EAAEE,CAAC,CAAC,GAAGd,GAAG,CAACiB,MAAM,CAACL,CAAC,EAAEE,CAAC,CAAC;MAC/C,CAAC,CAAC;MACF,IAAItB,MAAM,EAAEQ,GAAG,CAACkB,SAAS,CAAC,CAAC;MAC3BlB,GAAG,CAACmB,MAAM,CAAC,CAAC;MAEZnB,GAAG,CAACoB,SAAS,GAAG,SAAS;MACzB7B,aAAa,CAACkB,OAAO,CAACC,CAAC,IAAI;QACzBV,GAAG,CAACQ,SAAS,CAAC,CAAC;QACfR,GAAG,CAACqB,GAAG,CAACX,CAAC,CAACG,CAAC,GAAGhB,KAAK,EAAEa,CAAC,CAACK,CAAC,GAAGlB,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAGyB,IAAI,CAACC,EAAE,CAAC;QACpDvB,GAAG,CAACwB,IAAI,CAAC,CAAC;MACZ,CAAC,CAAC;IACJ;IAEA,IAAI,CAAChC,MAAM,IAAIC,UAAU,CAACY,MAAM,KAAK,CAAC,EAAE;;IAExC;IACA,IAAIoB,SAAS,GAAG,IAAI;IACpBhC,UAAU,CAACgB,OAAO,CAACiB,CAAC,IAAI;MACtB,MAAMC,IAAI,GAAG1C,IAAI,CAAC2C,OAAO,CAAC,CAAC,CACzB,CAACF,CAAC,CAACb,CAAC,EAAaa,CAAC,CAACX,CAAC,CAAC,EACrB,CAACW,CAAC,CAACb,CAAC,GAAGa,CAAC,CAACxB,KAAK,EAAGwB,CAAC,CAACX,CAAC,CAAC,EACrB,CAACW,CAAC,CAACb,CAAC,GAAGa,CAAC,CAACxB,KAAK,EAAGwB,CAAC,CAACX,CAAC,GAAGW,CAAC,CAACvB,MAAM,CAAC,EAChC,CAACuB,CAAC,CAACb,CAAC,EAAaa,CAAC,CAACX,CAAC,GAAGW,CAAC,CAACvB,MAAM,CAAC,EAChC,CAACuB,CAAC,CAACb,CAAC,EAAaa,CAAC,CAACX,CAAC,CAAC,CACtB,CAAC,CAAC;MACHU,SAAS,GAAGA,SAAS,GAAGxC,IAAI,CAAC4C,KAAK,CAACJ,SAAS,EAAEE,IAAI,CAAC,GAAGA,IAAI;IAC5D,CAAC,CAAC;;IAEF;IACAlC,UAAU,CAACgB,OAAO,CAACiB,CAAC,IAAI;MACtB,MAAMb,CAAC,GAAGa,CAAC,CAACb,CAAC,GAAGhB,KAAK;QAAEkB,CAAC,GAAGW,CAAC,CAACX,CAAC,GAAGlB,KAAK;MACtC,MAAMiC,CAAC,GAAGJ,CAAC,CAACxB,KAAK,GAAGL,KAAK;QAAEkC,CAAC,GAAGL,CAAC,CAACvB,MAAM,GAAGN,KAAK;MAC/CG,GAAG,CAACoB,SAAS,GAAK,MAAM;MACxBpB,GAAG,CAACM,WAAW,GAAG,MAAM;MACxBN,GAAG,CAACO,SAAS,GAAK,CAAC;MACnBP,GAAG,CAACgC,QAAQ,CAACnB,CAAC,EAAEE,CAAC,EAAEe,CAAC,EAAEC,CAAC,CAAC;MACxB/B,GAAG,CAACiC,UAAU,CAACpB,CAAC,EAAEE,CAAC,EAAEe,CAAC,EAAEC,CAAC,CAAC;IAC5B,CAAC,CAAC;;IAEF;IACA,MAAMG,UAAU,GAAGjD,IAAI,CAACkD,MAAM,CAACV,SAAS,EAAE/B,MAAM,EAAE;MAAE0C,KAAK,EAAC;IAAS,CAAC,CAAC;IACrEpC,GAAG,CAACM,WAAW,GAAG,MAAM;IACxBN,GAAG,CAACqC,WAAW,CAAC,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;IACtBrC,GAAG,CAACO,SAAS,GAAG,CAAC;IAEjB,MAAM+B,QAAQ,GAAGC,IAAI,IAAI;MACvBvC,GAAG,CAACQ,SAAS,CAAC,CAAC;MACf+B,IAAI,CAAC9B,OAAO,CAAC,CAAC,CAAC+B,EAAE,EAACC,EAAE,CAAC,EAAE9B,CAAC,KAAK;QAC3B,MAAMC,CAAC,GAAG4B,EAAE,GAAG3C,KAAK;UAAEiB,CAAC,GAAG2B,EAAE,GAAG5C,KAAK;QACpCc,CAAC,KAAG,CAAC,GAAGX,GAAG,CAACgB,MAAM,CAACJ,CAAC,EAACE,CAAC,CAAC,GAAGd,GAAG,CAACiB,MAAM,CAACL,CAAC,EAACE,CAAC,CAAC;MAC3C,CAAC,CAAC;MACFd,GAAG,CAACkB,SAAS,CAAC,CAAC;MACflB,GAAG,CAACmB,MAAM,CAAC,CAAC;IACd,CAAC;IAED,MAAMuB,MAAM,GAAGR,UAAU,CAACS,QAAQ;IAClC,IAAID,MAAM,CAACE,IAAI,KAAG,SAAS,EAAE;MAC3BN,QAAQ,CAACI,MAAM,CAACG,WAAW,CAAC,CAAC,CAAC,CAAC;IACjC,CAAC,MAAM;MACLH,MAAM,CAACG,WAAW,CAACpC,OAAO,CAACkB,IAAI,IAAEW,QAAQ,CAACX,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACrD;;IAEA;IACA;IACA,MAAMmB,UAAU,GAAG7D,IAAI,CAAC8D,aAAa,CAACtB,SAAS,CAAC;;IAEhD;IACAlC,aAAa,CAACkB,OAAO,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MAC9B,MAAMqC,CAAC,GAAGzD,aAAa,CAAC,CAACoB,CAAC,GAAC,CAAC,IAAIpB,aAAa,CAACc,MAAM,CAAC;;MAErD;MACA,MAAM4C,EAAE,GAAG,CAACvC,CAAC,CAACG,CAAC,GAAGmC,CAAC,CAACnC,CAAC,IAAE,CAAC;MACxB,MAAMqC,EAAE,GAAG,CAACxC,CAAC,CAACK,CAAC,GAAGiC,CAAC,CAACjC,CAAC,IAAE,CAAC;;MAExB;MACA,MAAMoC,GAAG,GAAGlE,IAAI,CAACmE,mBAAmB,CAClCnE,IAAI,CAACoE,KAAK,CAAC,CAACJ,EAAE,EAAEC,EAAE,CAAC,CAAC,EACpBJ,UAAU,EACV;QAAEV,KAAK,EAAE;MAAS,CACpB,CAAC;MAED,IAAIe,GAAG,GAAGzD,MAAM,GAAG,IAAI,EAAE;QACvB;QACA;QACA,MAAM4D,EAAE,GAAGN,CAAC,CAACnC,CAAC,GAAGH,CAAC,CAACG,CAAC;UAAE0C,EAAE,GAAGP,CAAC,CAACjC,CAAC,GAAGL,CAAC,CAACK,CAAC;QACpC,MAAMyC,GAAG,GAAGlC,IAAI,CAACmC,KAAK,CAACH,EAAE,EAAEC,EAAE,CAAC;QAC9B;QACA,IAAIG,EAAE,GAAG,CAACH,EAAE,GAACC,GAAG;UAAEG,EAAE,GAAGL,EAAE,GAACE,GAAG;QAC7B;QACA,IAAII,KAAK,GAAG,CAAC;QACbrE,aAAa,CAACkB,OAAO,CAAC,CAACoD,CAAC,EAACC,CAAC,KAAK;UAC7B,MAAMC,CAAC,GAAGxE,aAAa,CAAC,CAACuE,CAAC,GAAC,CAAC,IAAEvE,aAAa,CAACc,MAAM,CAAC;UACnDuD,KAAK,IAAIC,CAAC,CAAChD,CAAC,GAACkD,CAAC,CAAChD,CAAC,GAAGgD,CAAC,CAAClD,CAAC,GAACgD,CAAC,CAAC9C,CAAC;QAC5B,CAAC,CAAC;QACF,IAAI6C,KAAK,GAAG,CAAC,EAAE;UAAEF,EAAE,GAAG,CAACA,EAAE;UAAEC,EAAE,GAAG,CAACA,EAAE;QAAE;;QAErC;QACA,MAAMnB,EAAE,GAAG,CAAC9B,CAAC,CAACG,CAAC,GAAG6C,EAAE,GAAChE,MAAM,IAAIG,KAAK;QACpC,MAAM4C,EAAE,GAAG,CAAC/B,CAAC,CAACK,CAAC,GAAG4C,EAAE,GAACjE,MAAM,IAAIG,KAAK;QACpC,MAAMmE,EAAE,GAAG,CAAChB,CAAC,CAACnC,CAAC,GAAG6C,EAAE,GAAChE,MAAM,IAAIG,KAAK;QACpC,MAAMoE,EAAE,GAAG,CAACjB,CAAC,CAACjC,CAAC,GAAG4C,EAAE,GAACjE,MAAM,IAAIG,KAAK;QAEpCG,GAAG,CAACQ,SAAS,CAAC,CAAC;QACfR,GAAG,CAACgB,MAAM,CAACwB,EAAE,EAAEC,EAAE,CAAC;QAClBzC,GAAG,CAACiB,MAAM,CAAC+C,EAAE,EAAEC,EAAE,CAAC;QAClBjE,GAAG,CAACmB,MAAM,CAAC,CAAC;MACd;IACF,CAAC,CAAC;IAEFnB,GAAG,CAACqC,WAAW,CAAC,EAAE,CAAC;EACrB,CAAC,EAAE,CACDhD,KAAK,EAAEC,KAAK,EACZC,aAAa,EAAEC,MAAM,EACrBC,UAAU,EAAEC,MAAM,CACnB,CAAC;EAEF,oBACEP,OAAA;IACES,GAAG,EAAEA,GAAI;IACTsE,KAAK,EAAE;MAAEC,MAAM,EAAC,gBAAgB;MAAEC,SAAS,EAAC;IAAG;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClD,CAAC;AAEN;AAAC7E,EAAA,CAnJuBP,YAAY;AAAAqF,EAAA,GAAZrF,YAAY;AAAA,IAAAqF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}