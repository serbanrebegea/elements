{"ast":null,"code":"var _jsxFileName = \"c:\\\\New folder (2)\\\\src\\\\components\\\\LayoutCanvas.js\",\n  _s = $RefreshSig$();\n// src/components/LayoutCanvas.js\nimport React, { useRef, useEffect } from 'react';\nimport * as turf from '@turf/turf';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LayoutCanvas({\n  zoneW,\n  zoneH,\n  polygonPoints,\n  closed,\n  placements,\n  margin // in meters (e.g. 0.207)\n}) {\n  _s();\n  const canvasRef = useRef(null);\n  const scale = 100; // px per meter\n\n  useEffect(() => {\n    const c = canvasRef.current;\n    const ctx = c.getContext('2d');\n    c.width = zoneW * scale;\n    c.height = zoneH * scale;\n    ctx.clearRect(0, 0, c.width, c.height);\n\n    // 1) Draw polygon and vertices\n    if (polygonPoints.length) {\n      ctx.strokeStyle = '#0066CC';\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      polygonPoints.forEach((p, i) => {\n        const X = p.x * scale,\n          Y = p.y * scale;\n        i === 0 ? ctx.moveTo(X, Y) : ctx.lineTo(X, Y);\n      });\n      if (closed) ctx.closePath();\n      ctx.stroke();\n\n      // draw vertex dots\n      ctx.fillStyle = '#0066CC';\n      polygonPoints.forEach(p => {\n        ctx.beginPath();\n        ctx.arc(p.x * scale, p.y * scale, 4, 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    }\n\n    // 2) Draw tiles\n    placements.forEach(t => {\n      const x = t.x * scale,\n        y = t.y * scale;\n      const w = t.width * scale,\n        h = t.height * scale;\n      ctx.fillStyle = '#DDD';\n      ctx.strokeStyle = '#333';\n      ctx.lineWidth = 1;\n      ctx.fillRect(x, y, w, h);\n      ctx.strokeRect(x, y, w, h);\n\n      // corner dots\n      [[0, 0], [w, 0], [w, h], [0, h]].forEach(([dx, dy]) => {\n        ctx.fillStyle = '#000';\n        ctx.beginPath();\n        ctx.arc(x + dx, y + dy, 3, 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    });\n    if (!closed || placements.length === 0) return;\n\n    // 3) Build union of tile rects and buffer it\n    let unionPoly = null;\n    placements.forEach(t => {\n      const poly = turf.polygon([[[t.x, t.y], [t.x + t.width, t.y], [t.x + t.width, t.y + t.height], [t.x, t.y + t.height], [t.x, t.y]]]);\n      unionPoly = unionPoly ? turf.union(unionPoly, poly) : poly;\n    });\n    const tileBuffer = turf.buffer(unionPoly, margin, {\n      units: 'meters'\n    });\n\n    // draw buffer around tiles\n    ctx.strokeStyle = '#F00';\n    ctx.setLineDash([6, 4]);\n    ctx.lineWidth = 2;\n    const drawCoords = coords => {\n      ctx.beginPath();\n      coords.forEach(([px, py], i) => {\n        const X = px * scale,\n          Y = py * scale;\n        i === 0 ? ctx.moveTo(X, Y) : ctx.lineTo(X, Y);\n      });\n      ctx.closePath();\n      ctx.stroke();\n    };\n    const tbGeom = tileBuffer.geometry;\n    if (tbGeom.type === 'Polygon') {\n      drawCoords(tbGeom.coordinates[0]);\n    } else {\n      tbGeom.coordinates.forEach(poly => drawCoords(poly[0]));\n    }\n\n    // 4) For any polygon edge whose midpoint‐to‐tileBuffer > margin,\n    //    draw the margin offset from the polygon instead of from tiles.\n\n    // Determine polygon orientation (CCW => area>0)\n    let area2 = 0;\n    polygonPoints.forEach((p, i) => {\n      const q = polygonPoints[(i + 1) % polygonPoints.length];\n      area2 += p.x * q.y - q.x * p.y;\n    });\n    const ccw = area2 > 0;\n\n    // Helper: check if an offset‐inside point falls inside tileBuffer\n    const isCovered = (mx, my, nx, ny) => {\n      const ox = mx + nx * margin;\n      const oy = my + ny * margin;\n      return turf.booleanPointInPolygon(turf.point([ox, oy]), tileBuffer);\n    };\n\n    // Draw per‐edge polygon margin where needed\n    polygonPoints.forEach((p, i) => {\n      const q = polygonPoints[(i + 1) % polygonPoints.length];\n      // edge direction\n      const dx = q.x - p.x,\n        dy = q.y - p.y;\n      const len = Math.hypot(dx, dy);\n      // interior normal\n      let nx = -dy / len,\n        ny = dx / len;\n      if (!ccw) {\n        nx = -nx;\n        ny = -ny;\n      }\n\n      // midpoint of edge\n      const mx = (p.x + q.x) / 2,\n        my = (p.y + q.y) / 2;\n      if (!isCovered(mx, my, nx, ny)) {\n        // draw this edge offset from polygon\n        const px = p.x + nx * margin,\n          py = p.y + ny * margin;\n        const qx = q.x + nx * margin,\n          qy = q.y + ny * margin;\n        ctx.beginPath();\n        ctx.moveTo(px * scale, py * scale);\n        ctx.lineTo(qx * scale, qy * scale);\n        ctx.stroke();\n      }\n    });\n    ctx.setLineDash([]);\n  }, [zoneW, zoneH, polygonPoints, closed, placements, margin]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      border: '1px solid #333',\n      marginTop: 20\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n}\n_s(LayoutCanvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = LayoutCanvas;\nvar _c;\n$RefreshReg$(_c, \"LayoutCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","turf","jsxDEV","_jsxDEV","LayoutCanvas","zoneW","zoneH","polygonPoints","closed","placements","margin","_s","canvasRef","scale","c","current","ctx","getContext","width","height","clearRect","length","strokeStyle","lineWidth","beginPath","forEach","p","i","X","x","Y","y","moveTo","lineTo","closePath","stroke","fillStyle","arc","Math","PI","fill","t","w","h","fillRect","strokeRect","dx","dy","unionPoly","poly","polygon","union","tileBuffer","buffer","units","setLineDash","drawCoords","coords","px","py","tbGeom","geometry","type","coordinates","area2","q","ccw","isCovered","mx","my","nx","ny","ox","oy","booleanPointInPolygon","point","len","hypot","qx","qy","ref","style","border","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["c:/New folder (2)/src/components/LayoutCanvas.js"],"sourcesContent":["// src/components/LayoutCanvas.js\r\nimport React, { useRef, useEffect } from 'react';\r\nimport * as turf from '@turf/turf';\r\n\r\nexport default function LayoutCanvas({\r\n  zoneW,\r\n  zoneH,\r\n  polygonPoints,\r\n  closed,\r\n  placements,\r\n  margin  // in meters (e.g. 0.207)\r\n}) {\r\n  const canvasRef = useRef(null);\r\n  const scale = 100; // px per meter\r\n\r\n  useEffect(() => {\r\n    const c = canvasRef.current;\r\n    const ctx = c.getContext('2d');\r\n    c.width  = zoneW * scale;\r\n    c.height = zoneH * scale;\r\n    ctx.clearRect(0, 0, c.width, c.height);\r\n\r\n    // 1) Draw polygon and vertices\r\n    if (polygonPoints.length) {\r\n      ctx.strokeStyle = '#0066CC';\r\n      ctx.lineWidth = 2;\r\n      ctx.beginPath();\r\n      polygonPoints.forEach((p, i) => {\r\n        const X = p.x * scale, Y = p.y * scale;\r\n        i === 0 ? ctx.moveTo(X, Y) : ctx.lineTo(X, Y);\r\n      });\r\n      if (closed) ctx.closePath();\r\n      ctx.stroke();\r\n\r\n      // draw vertex dots\r\n      ctx.fillStyle = '#0066CC';\r\n      polygonPoints.forEach(p => {\r\n        ctx.beginPath();\r\n        ctx.arc(p.x * scale, p.y * scale, 4, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n      });\r\n    }\r\n\r\n    // 2) Draw tiles\r\n    placements.forEach(t => {\r\n      const x = t.x * scale, y = t.y * scale;\r\n      const w = t.width * scale, h = t.height * scale;\r\n      ctx.fillStyle   = '#DDD';\r\n      ctx.strokeStyle = '#333';\r\n      ctx.lineWidth   = 1;\r\n      ctx.fillRect(x, y, w, h);\r\n      ctx.strokeRect(x, y, w, h);\r\n\r\n      // corner dots\r\n      [[0,0],[w,0],[w,h],[0,h]].forEach(([dx,dy]) => {\r\n        ctx.fillStyle = '#000';\r\n        ctx.beginPath();\r\n        ctx.arc(x + dx, y + dy, 3, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n      });\r\n    });\r\n\r\n    if (!closed || placements.length === 0) return;\r\n\r\n    // 3) Build union of tile rects and buffer it\r\n    let unionPoly = null;\r\n    placements.forEach(t => {\r\n      const poly = turf.polygon([[\r\n        [t.x,           t.y],\r\n        [t.x + t.width, t.y],\r\n        [t.x + t.width, t.y + t.height],\r\n        [t.x,           t.y + t.height],\r\n        [t.x,           t.y]\r\n      ]]);\r\n      unionPoly = unionPoly ? turf.union(unionPoly, poly) : poly;\r\n    });\r\n    const tileBuffer = turf.buffer(unionPoly, margin, { units: 'meters' });\r\n\r\n    // draw buffer around tiles\r\n    ctx.strokeStyle = '#F00';\r\n    ctx.setLineDash([6,4]);\r\n    ctx.lineWidth = 2;\r\n\r\n    const drawCoords = coords => {\r\n      ctx.beginPath();\r\n      coords.forEach(([px,py], i) => {\r\n        const X = px * scale, Y = py * scale;\r\n        i === 0 ? ctx.moveTo(X, Y) : ctx.lineTo(X, Y);\r\n      });\r\n      ctx.closePath();\r\n      ctx.stroke();\r\n    };\r\n\r\n    const tbGeom = tileBuffer.geometry;\r\n    if (tbGeom.type === 'Polygon') {\r\n      drawCoords(tbGeom.coordinates[0]);\r\n    } else {\r\n      tbGeom.coordinates.forEach(poly => drawCoords(poly[0]));\r\n    }\r\n\r\n    // 4) For any polygon edge whose midpoint‐to‐tileBuffer > margin,\r\n    //    draw the margin offset from the polygon instead of from tiles.\r\n\r\n    // Determine polygon orientation (CCW => area>0)\r\n    let area2 = 0;\r\n    polygonPoints.forEach((p,i) => {\r\n      const q = polygonPoints[(i+1)%polygonPoints.length];\r\n      area2 += p.x*q.y - q.x*p.y;\r\n    });\r\n    const ccw = area2 > 0;\r\n\r\n    // Helper: check if an offset‐inside point falls inside tileBuffer\r\n    const isCovered = (mx, my, nx, ny) => {\r\n      const ox = mx + nx * margin;\r\n      const oy = my + ny * margin;\r\n      return turf.booleanPointInPolygon(turf.point([ox,oy]), tileBuffer);\r\n    };\r\n\r\n    // Draw per‐edge polygon margin where needed\r\n    polygonPoints.forEach((p,i) => {\r\n      const q = polygonPoints[(i+1)%polygonPoints.length];\r\n      // edge direction\r\n      const dx = q.x - p.x, dy = q.y - p.y;\r\n      const len = Math.hypot(dx, dy);\r\n      // interior normal\r\n      let nx = -dy/len, ny = dx/len;\r\n      if (!ccw) { nx = -nx; ny = -ny; }\r\n\r\n      // midpoint of edge\r\n      const mx = (p.x + q.x)/2, my = (p.y + q.y)/2;\r\n      if (!isCovered(mx, my, nx, ny)) {\r\n        // draw this edge offset from polygon\r\n        const px = p.x + nx * margin, py = p.y + ny * margin;\r\n        const qx = q.x + nx * margin, qy = q.y + ny * margin;\r\n        ctx.beginPath();\r\n        ctx.moveTo(px * scale, py * scale);\r\n        ctx.lineTo(qx * scale, qy * scale);\r\n        ctx.stroke();\r\n      }\r\n    });\r\n\r\n    ctx.setLineDash([]);\r\n  }, [\r\n    zoneW, zoneH,\r\n    polygonPoints, closed,\r\n    placements, margin\r\n  ]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      style={{ border: '1px solid #333', marginTop: 20 }}\r\n    />\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}