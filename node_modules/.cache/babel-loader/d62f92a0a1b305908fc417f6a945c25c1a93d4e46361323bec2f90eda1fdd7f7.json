{"ast":null,"code":"var _jsxFileName = \"c:\\\\New folder (2)\\\\src\\\\components\\\\LayoutCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as turf from '@turf/turf';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LayoutCanvas({\n  zoneW,\n  zoneH,\n  polygonPoints,\n  isPolygonClosed,\n  placements,\n  margin\n}) {\n  _s();\n  const ref = useRef();\n  const scale = 100; // 1 m = 100 px\n\n  useEffect(() => {\n    const canvas = ref.current;\n    const ctx = canvas.getContext('2d');\n    canvas.width = zoneW * scale;\n    canvas.height = zoneH * scale;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Draw original polygon\n    if (polygonPoints.length) {\n      ctx.strokeStyle = '#0066CC';\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      polygonPoints.forEach((p, i) => {\n        const X = p.x * scale,\n          Y = p.y * scale;\n        i === 0 ? ctx.moveTo(X, Y) : ctx.lineTo(X, Y);\n      });\n      if (isPolygonClosed) ctx.closePath();\n      ctx.stroke();\n    }\n\n    // Draw tiles\n    placements.forEach(t => {\n      ctx.fillStyle = '#DDDDDD';\n      ctx.strokeStyle = '#333';\n      ctx.lineWidth = 1;\n      ctx.fillRect(t.x * scale, t.y * scale, t.width * scale, t.height * scale);\n      ctx.strokeRect(t.x * scale, t.y * scale, t.width * scale, t.height * scale);\n    });\n\n    // Draw 207 mm boundary around the union of tiles\n    if (placements.length) {\n      let unionPoly = null;\n      placements.forEach(t => {\n        const poly = turf.polygon([[[t.x, t.y], [t.x + t.width, t.y], [t.x + t.width, t.y + t.height], [t.x, t.y + t.height], [t.x, t.y]]]);\n        unionPoly = unionPoly ? turf.union(unionPoly, poly) : poly;\n      });\n      const buffered = turf.buffer(unionPoly, margin, {\n        units: 'meters'\n      });\n      if (buffered && buffered.geometry) {\n        ctx.strokeStyle = '#FF0000';\n        ctx.setLineDash([6, 4]);\n        ctx.lineWidth = 2;\n        const drawRing = ring => {\n          ctx.beginPath();\n          ring.forEach(([px, py], i) => {\n            const X = px * scale,\n              Y = py * scale;\n            i === 0 ? ctx.moveTo(X, Y) : ctx.lineTo(X, Y);\n          });\n          ctx.closePath();\n          ctx.stroke();\n        };\n        const g = buffered.geometry;\n        if (g.type === 'Polygon') {\n          drawRing(g.coordinates[0]);\n        } else {\n          g.coordinates.forEach(poly => drawRing(poly[0]));\n        }\n        ctx.setLineDash([]);\n      }\n    }\n  }, [zoneW, zoneH, polygonPoints, isPolygonClosed, placements, margin]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: ref,\n    style: {\n      border: '1px solid #333',\n      marginTop: 20\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n_s(LayoutCanvas, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n_c = LayoutCanvas;\nvar _c;\n$RefreshReg$(_c, \"LayoutCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","turf","jsxDEV","_jsxDEV","LayoutCanvas","zoneW","zoneH","polygonPoints","isPolygonClosed","placements","margin","_s","ref","scale","canvas","current","ctx","getContext","width","height","clearRect","length","strokeStyle","lineWidth","beginPath","forEach","p","i","X","x","Y","y","moveTo","lineTo","closePath","stroke","t","fillStyle","fillRect","strokeRect","unionPoly","poly","polygon","union","buffered","buffer","units","geometry","setLineDash","drawRing","ring","px","py","g","type","coordinates","style","border","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["c:/New folder (2)/src/components/LayoutCanvas.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as turf from '@turf/turf';\r\n\r\nexport default function LayoutCanvas({\r\n  zoneW, zoneH,\r\n  polygonPoints, isPolygonClosed,\r\n  placements, margin\r\n}) {\r\n  const ref = useRef();\r\n  const scale = 100; // 1 m = 100 px\r\n\r\n  useEffect(() => {\r\n    const canvas = ref.current;\r\n    const ctx    = canvas.getContext('2d');\r\n    canvas.width  = zoneW * scale;\r\n    canvas.height = zoneH * scale;\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Draw original polygon\r\n    if (polygonPoints.length) {\r\n      ctx.strokeStyle = '#0066CC'; ctx.lineWidth = 2;\r\n      ctx.beginPath();\r\n      polygonPoints.forEach((p, i) => {\r\n        const X = p.x * scale, Y = p.y * scale;\r\n        i === 0 ? ctx.moveTo(X, Y) : ctx.lineTo(X, Y);\r\n      });\r\n      if (isPolygonClosed) ctx.closePath();\r\n      ctx.stroke();\r\n    }\r\n\r\n    // Draw tiles\r\n    placements.forEach(t => {\r\n      ctx.fillStyle   = '#DDDDDD';\r\n      ctx.strokeStyle = '#333';\r\n      ctx.lineWidth   = 1;\r\n      ctx.fillRect(\r\n        t.x * scale,\r\n        t.y * scale,\r\n        t.width * scale,\r\n        t.height * scale\r\n      );\r\n      ctx.strokeRect(\r\n        t.x * scale,\r\n        t.y * scale,\r\n        t.width * scale,\r\n        t.height * scale\r\n      );\r\n    });\r\n\r\n    // Draw 207 mm boundary around the union of tiles\r\n    if (placements.length) {\r\n      let unionPoly = null;\r\n      placements.forEach(t => {\r\n        const poly = turf.polygon([[\r\n          [t.x,              t.y],\r\n          [t.x + t.width,    t.y],\r\n          [t.x + t.width,    t.y + t.height],\r\n          [t.x,              t.y + t.height],\r\n          [t.x,              t.y]\r\n        ]]);\r\n        unionPoly = unionPoly ? turf.union(unionPoly, poly) : poly;\r\n      });\r\n\r\n      const buffered = turf.buffer(unionPoly, margin, { units: 'meters' });\r\n      if (buffered && buffered.geometry) {\r\n        ctx.strokeStyle = '#FF0000';\r\n        ctx.setLineDash([6, 4]);\r\n        ctx.lineWidth = 2;\r\n\r\n        const drawRing = ring => {\r\n          ctx.beginPath();\r\n          ring.forEach(([px, py], i) => {\r\n            const X = px * scale, Y = py * scale;\r\n            i === 0 ? ctx.moveTo(X, Y) : ctx.lineTo(X, Y);\r\n          });\r\n          ctx.closePath();\r\n          ctx.stroke();\r\n        };\r\n\r\n        const g = buffered.geometry;\r\n        if (g.type === 'Polygon') {\r\n          drawRing(g.coordinates[0]);\r\n        } else {\r\n          g.coordinates.forEach(poly => drawRing(poly[0]));\r\n        }\r\n\r\n        ctx.setLineDash([]);\r\n      }\r\n    }\r\n  }, [zoneW, zoneH, polygonPoints, isPolygonClosed, placements, margin]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={ref}\r\n      style={{ border: '1px solid #333', marginTop: 20 }}\r\n    />\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}