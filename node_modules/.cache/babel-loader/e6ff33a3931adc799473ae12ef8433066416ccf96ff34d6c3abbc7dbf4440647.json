{"ast":null,"code":"// src/App.js\nimport React,{useState}from'react';import*as turf from'@turf/turf';import LayoutCanvas from'./components/LayoutCanvas';import optimizeLayout from'./utils/optimizer';import'./index.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function App(){// Canvas dimensions\nconst[zoneW,setZoneW]=useState(10);const[zoneH,setZoneH]=useState(6);// Polygon definition\nconst[polygonPoints,setPolygonPoints]=useState([]);const[closed,setClosed]=useState(false);const[sideLen,setSideLen]=useState('');const[sideAng,setSideAng]=useState('');// Layout options\nconst tileLengths=[4,2,1];const[orientation,setOrientation]=useState('both');const[tileW,setTileW]=useState(1.26);const[margin,setMargin]=useState(0.207);// Pricing per tile length (EUR)\nconst[prices,setPrices]=useState({4:20,2:12,1:6});// Tile placements\nconst[placements,setPlacements]=useState([]);// Manual add/delete\nconst[newTileLen,setNewTileLen]=useState(4);// Boundary & cost (EUR)\nconst[pricePerMeter,setPricePerMeter]=useState(0);const[boundaryPerimeter,setBoundaryPerimeter]=useState(0);const[boundaryCost,setBoundaryCost]=useState(0);// 1) Build polygon by adding sides\nconst addSide=()=>{const L=parseFloat(sideLen),A=parseFloat(sideAng)*Math.PI/180;if(!L||isNaN(A))return;const last=polygonPoints.length?polygonPoints[polygonPoints.length-1]:{x:0,y:0};setPolygonPoints([...polygonPoints,{x:last.x+L*Math.cos(A),y:last.y+L*Math.sin(A)}]);setSideLen('');setSideAng('');};const finishPoly=()=>{if(polygonPoints.length>=3)setClosed(true);};const resetAll=()=>{setPolygonPoints([]);setClosed(false);setPlacements([]);setBoundaryPerimeter(0);setBoundaryCost(0);};// 2) Automatic optimize\nconst optimize=()=>{const{placements:pl}=optimizeLayout(polygonPoints,tileLengths,tileW,margin,orientation);setPlacements(pl);setBoundaryPerimeter(0);setBoundaryCost(0);};// 3) Manual add\nconst addTile=()=>{if(!closed)return;const room=turf.polygon([[...polygonPoints.map(p=>[p.x,p.y]),[polygonPoints[0].x,polygonPoints[0].y]]]);const inner=turf.buffer(room,-margin,{units:'meters'});const[minX,minY]=turf.bbox(inner);setPlacements(ps=>[...ps,{x:minX,y:minY,width:newTileLen,height:tileW,length:newTileLen}]);};const removeTile=idx=>{setPlacements(ps=>ps.filter((_,i)=>i!==idx));};// 4) Calculate offset perimeter in meters (Euclidean)\nconst calculateBoundary=()=>{if(placements.length===0){setBoundaryPerimeter(0);setBoundaryCost(0);return;}// union all tile rects\nlet unionPoly=null;placements.forEach(t=>{const poly=turf.polygon([[[t.x,t.y],[t.x+t.width,t.y],[t.x+t.width,t.y+t.height],[t.x,t.y+t.height],[t.x,t.y]]]);unionPoly=unionPoly?turf.union(unionPoly,poly):poly;});// microâ€‘buffer to fuse tiny gaps\nunionPoly=turf.buffer(unionPoly,1e-6,{units:'meters'});unionPoly=turf.buffer(unionPoly,-1e-6,{units:'meters'});// buffer outward by margin\nconst buf=turf.buffer(unionPoly,margin,{units:'meters',steps:1});// sum Euclidean lengths\nconst geom=buf.geometry;const rings=geom.type==='Polygon'?[geom.coordinates[0]]:geom.coordinates.map(poly=>poly[0]);let peri=0;rings.forEach(ring=>{for(let i=0;i<ring.length-1;i++){const[x1,y1]=ring[i];const[x2,y2]=ring[i+1];peri+=Math.hypot(x2-x1,y2-y1);}});setBoundaryPerimeter(peri);setBoundaryCost(peri*pricePerMeter);};// dynamic tile counts\nconst tileCounts=placements.reduce((acc,t)=>{acc[t.length]=(acc[t.length]||0)+1;return acc;},{4:0,2:0,1:0});// total tile cost (EUR)\nconst tileCost=Object.entries(tileCounts).reduce((sum,_ref)=>{let[len,count]=_ref;return sum+count*(prices[len]||0);},0);// grand total = tiles + boundary\nconst grandTotal=tileCost+boundaryCost;return/*#__PURE__*/_jsxs(\"div\",{className:\"app-container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Tile Layout Optimizer\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Canvas W (m):\",/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:zoneW,onChange:e=>setZoneW(+e.target.value||0)})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Canvas H (m):\",/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:zoneH,onChange:e=>setZoneH(+e.target.value||0)})]}),/*#__PURE__*/_jsx(\"button\",{onClick:resetAll,children:\"Reset All\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Side length (m):\",/*#__PURE__*/_jsx(\"input\",{type:\"number\",step:\"0.01\",value:sideLen,onChange:e=>setSideLen(e.target.value),disabled:closed})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Angle (\\xB0):\",/*#__PURE__*/_jsx(\"input\",{type:\"number\",step:\"1\",value:sideAng,onChange:e=>setSideAng(e.target.value),disabled:closed})]}),/*#__PURE__*/_jsx(\"button\",{onClick:addSide,disabled:closed,children:\"Add Side\"}),/*#__PURE__*/_jsx(\"button\",{onClick:finishPoly,disabled:closed||polygonPoints.length<3,children:\"Close Polygon\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Orientation:\",/*#__PURE__*/_jsxs(\"select\",{value:orientation,onChange:e=>setOrientation(e.target.value),disabled:!closed,children:[/*#__PURE__*/_jsx(\"option\",{value:\"both\",children:\"Both\"}),/*#__PURE__*/_jsx(\"option\",{value:\"horizontal\",children:\"Horizontal only\"}),/*#__PURE__*/_jsx(\"option\",{value:\"vertical\",children:\"Vertical only\"})]})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Tile short side (m):\",/*#__PURE__*/_jsx(\"input\",{type:\"number\",step:\"0.01\",value:tileW,onChange:e=>setTileW(+e.target.value||0),disabled:!closed})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Offset (m):\",/*#__PURE__*/_jsx(\"input\",{type:\"number\",step:\"0.001\",value:margin,onChange:e=>setMargin(+e.target.value||0),disabled:!closed})]}),/*#__PURE__*/_jsx(\"button\",{onClick:optimize,disabled:!closed,children:\"Optimize\"})]}),closed&&/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"New tile length:\",/*#__PURE__*/_jsx(\"select\",{value:newTileLen,onChange:e=>setNewTileLen(+e.target.value),children:tileLengths.map(L=>/*#__PURE__*/_jsxs(\"option\",{value:L,children:[L,\"\\xA0m\"]},L))})]}),/*#__PURE__*/_jsx(\"button\",{onClick:addTile,children:\"Add Tile\"}),/*#__PURE__*/_jsx(\"span\",{style:{marginLeft:12},children:\"(dbl\\u2011click to delete)\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Price per 4\\xA0m tile (\\u20AC):\",/*#__PURE__*/_jsx(\"input\",{type:\"number\",step:\"0.01\",value:prices[4],onChange:e=>setPrices({...prices,4:+e.target.value||0})})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Price per 2\\xA0m tile (\\u20AC):\",/*#__PURE__*/_jsx(\"input\",{type:\"number\",step:\"0.01\",value:prices[2],onChange:e=>setPrices({...prices,2:+e.target.value||0})})]}),/*#__PURE__*/_jsxs(\"label\",{children:[\"Price per 1\\xA0m tile (\\u20AC):\",/*#__PURE__*/_jsx(\"input\",{type:\"number\",step:\"0.01\",value:prices[1],onChange:e=>setPrices({...prices,1:+e.target.value||0})})]})]}),placements.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Counts:\"}),\"\\xA0 4\\xA0m:\\xA0\",tileCounts[4],\",\\xA0 2\\xA0m:\\xA0\",tileCounts[2],\",\\xA0 1\\xA0m:\\xA0\",tileCounts[1]]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Tile cost:\"}),\"\\xA0\\u20AC\",tileCost.toFixed(2)]})]}),placements.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"Price per meter (\\u20AC):\",/*#__PURE__*/_jsx(\"input\",{type:\"number\",step:\"0.01\",value:pricePerMeter,onChange:e=>setPricePerMeter(+e.target.value||0)})]}),/*#__PURE__*/_jsx(\"button\",{onClick:calculateBoundary,children:\"Calculate Offset Perimeter\"}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Offset perimeter:\"}),\"\\xA0\",boundaryPerimeter.toFixed(2),\"\\xA0m\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Perimeter cost:\"}),\"\\xA0\\u20AC\",boundaryCost.toFixed(2)]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Grand total:\"}),\"\\xA0\\u20AC\",grandTotal.toFixed(2)]})]}),/*#__PURE__*/_jsx(LayoutCanvas,{zoneW:zoneW,zoneH:zoneH,polygonPoints:polygonPoints,closed:closed,placements:placements,setPlacements:setPlacements,removeTile:removeTile,margin:margin})]});}","map":{"version":3,"names":["React","useState","turf","LayoutCanvas","optimizeLayout","jsx","_jsx","jsxs","_jsxs","App","zoneW","setZoneW","zoneH","setZoneH","polygonPoints","setPolygonPoints","closed","setClosed","sideLen","setSideLen","sideAng","setSideAng","tileLengths","orientation","setOrientation","tileW","setTileW","margin","setMargin","prices","setPrices","placements","setPlacements","newTileLen","setNewTileLen","pricePerMeter","setPricePerMeter","boundaryPerimeter","setBoundaryPerimeter","boundaryCost","setBoundaryCost","addSide","L","parseFloat","A","Math","PI","isNaN","last","length","x","y","cos","sin","finishPoly","resetAll","optimize","pl","addTile","room","polygon","map","p","inner","buffer","units","minX","minY","bbox","ps","width","height","removeTile","idx","filter","_","i","calculateBoundary","unionPoly","forEach","t","poly","union","buf","steps","geom","geometry","rings","type","coordinates","peri","ring","x1","y1","x2","y2","hypot","tileCounts","reduce","acc","tileCost","Object","entries","sum","_ref","len","count","grandTotal","className","children","value","onChange","e","target","onClick","step","disabled","style","marginLeft","toFixed"],"sources":["c:/apps/src/App.js"],"sourcesContent":["// src/App.js\r\n\r\nimport React, { useState } from 'react';\r\nimport * as turf from '@turf/turf';\r\nimport LayoutCanvas from './components/LayoutCanvas';\r\nimport optimizeLayout from './utils/optimizer';\r\nimport './index.css';\r\n\r\nexport default function App() {\r\n  // Canvas dimensions\r\n  const [zoneW, setZoneW] = useState(10);\r\n  const [zoneH, setZoneH] = useState(6);\r\n\r\n  // Polygon definition\r\n  const [polygonPoints, setPolygonPoints] = useState([]);\r\n  const [closed, setClosed]               = useState(false);\r\n  const [sideLen, setSideLen]             = useState('');\r\n  const [sideAng, setSideAng]             = useState('');\r\n\r\n  // Layout options\r\n  const tileLengths   = [4, 2, 1];\r\n  const [orientation, setOrientation] = useState('both');\r\n  const [tileW, setTileW]             = useState(1.26);\r\n  const [margin, setMargin]           = useState(0.207);\r\n\r\n  // Pricing per tile length (EUR)\r\n  const [prices, setPrices] = useState({4:20,2:12,1:6});\r\n\r\n  // Tile placements\r\n  const [placements, setPlacements] = useState([]);\r\n\r\n  // Manual add/delete\r\n  const [newTileLen, setNewTileLen] = useState(4);\r\n\r\n  // Boundary & cost (EUR)\r\n  const [pricePerMeter, setPricePerMeter]       = useState(0);\r\n  const [boundaryPerimeter, setBoundaryPerimeter] = useState(0);\r\n  const [boundaryCost, setBoundaryCost]         = useState(0);\r\n\r\n  // 1) Build polygon by adding sides\r\n  const addSide = () => {\r\n    const L = parseFloat(sideLen),\r\n          A = parseFloat(sideAng) * Math.PI/180;\r\n    if (!L || isNaN(A)) return;\r\n    const last = polygonPoints.length\r\n      ? polygonPoints[polygonPoints.length-1]\r\n      : {x:0,y:0};\r\n    setPolygonPoints([\r\n      ...polygonPoints,\r\n      { x: last.x + L*Math.cos(A), y: last.y + L*Math.sin(A) }\r\n    ]);\r\n    setSideLen(''); setSideAng('');\r\n  };\r\n  const finishPoly = () => {\r\n    if (polygonPoints.length >= 3) setClosed(true);\r\n  };\r\n  const resetAll = () => {\r\n    setPolygonPoints([]); setClosed(false);\r\n    setPlacements([]);\r\n    setBoundaryPerimeter(0); setBoundaryCost(0);\r\n  };\r\n\r\n  // 2) Automatic optimize\r\n  const optimize = () => {\r\n    const { placements: pl } = optimizeLayout(\r\n      polygonPoints, tileLengths, tileW, margin, orientation\r\n    );\r\n    setPlacements(pl);\r\n    setBoundaryPerimeter(0);\r\n    setBoundaryCost(0);\r\n  };\r\n\r\n  // 3) Manual add\r\n  const addTile = () => {\r\n    if (!closed) return;\r\n    const room  = turf.polygon([[\r\n      ...polygonPoints.map(p=>[p.x,p.y]),\r\n      [polygonPoints[0].x, polygonPoints[0].y]\r\n    ]]);\r\n    const inner = turf.buffer(room, -margin, { units:'meters' });\r\n    const [minX,minY] = turf.bbox(inner);\r\n    setPlacements(ps=>[\r\n      ...ps,\r\n      { x:minX, y:minY,\r\n        width:newTileLen, height:tileW,\r\n        length:newTileLen }\r\n    ]);\r\n  };\r\n  const removeTile = idx => {\r\n    setPlacements(ps=>ps.filter((_,i)=>i!==idx));\r\n  };\r\n\r\n  // 4) Calculate offset perimeter in meters (Euclidean)\r\n  const calculateBoundary = () => {\r\n    if (placements.length === 0) {\r\n      setBoundaryPerimeter(0);\r\n      setBoundaryCost(0);\r\n      return;\r\n    }\r\n    // union all tile rects\r\n    let unionPoly = null;\r\n    placements.forEach(t => {\r\n      const poly = turf.polygon([[\r\n        [t.x,           t.y],\r\n        [t.x + t.width, t.y],\r\n        [t.x + t.width, t.y + t.height],\r\n        [t.x,           t.y + t.height],\r\n        [t.x,           t.y]\r\n      ]]);\r\n      unionPoly = unionPoly ? turf.union(unionPoly, poly) : poly;\r\n    });\r\n    // microâ€‘buffer to fuse tiny gaps\r\n    unionPoly = turf.buffer(unionPoly, 1e-6,  { units:'meters' });\r\n    unionPoly = turf.buffer(unionPoly,-1e-6,  { units:'meters' });\r\n    // buffer outward by margin\r\n    const buf = turf.buffer(unionPoly, margin, {\r\n      units:'meters',\r\n      steps:1\r\n    });\r\n    // sum Euclidean lengths\r\n    const geom = buf.geometry;\r\n    const rings = geom.type === 'Polygon'\r\n      ? [geom.coordinates[0]]\r\n      : geom.coordinates.map(poly => poly[0]);\r\n    let peri = 0;\r\n    rings.forEach(ring => {\r\n      for (let i = 0; i < ring.length - 1; i++) {\r\n        const [x1,y1] = ring[i];\r\n        const [x2,y2] = ring[i+1];\r\n        peri += Math.hypot(x2 - x1, y2 - y1);\r\n      }\r\n    });\r\n    setBoundaryPerimeter(peri);\r\n    setBoundaryCost(peri * pricePerMeter);\r\n  };\r\n\r\n  // dynamic tile counts\r\n  const tileCounts = placements.reduce((acc,t) => {\r\n    acc[t.length] = (acc[t.length]||0) + 1;\r\n    return acc;\r\n  }, {4:0,2:0,1:0});\r\n\r\n  // total tile cost (EUR)\r\n  const tileCost = Object.entries(tileCounts)\r\n    .reduce((sum,[len,count])=>\r\n      sum + count * (prices[len]||0), 0\r\n    );\r\n\r\n  // grand total = tiles + boundary\r\n  const grandTotal = tileCost + boundaryCost;\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <h1>Tile Layout Optimizer</h1>\r\n\r\n      {/* Canvas & polygon controls */}\r\n      <div className=\"controls\">\r\n        <label>\r\n          Canvas W (m):\r\n          <input type=\"number\" value={zoneW}\r\n                 onChange={e=>setZoneW(+e.target.value||0)} />\r\n        </label>\r\n        <label>\r\n          Canvas H (m):\r\n          <input type=\"number\" value={zoneH}\r\n                 onChange={e=>setZoneH(+e.target.value||0)} />\r\n        </label>\r\n        <button onClick={resetAll}>Reset All</button>\r\n      </div>\r\n      <div className=\"controls\">\r\n        <label>\r\n          Side length (m):\r\n          <input type=\"number\" step=\"0.01\" value={sideLen}\r\n                 onChange={e=>setSideLen(e.target.value)}\r\n                 disabled={closed}/>\r\n        </label>\r\n        <label>\r\n          Angle (Â°):\r\n          <input type=\"number\" step=\"1\" value={sideAng}\r\n                 onChange={e=>setSideAng(e.target.value)}\r\n                 disabled={closed}/>\r\n        </label>\r\n        <button onClick={addSide} disabled={closed}>Add Side</button>\r\n        <button onClick={finishPoly}\r\n                disabled={closed||polygonPoints.length<3}>\r\n          Close Polygon\r\n        </button>\r\n      </div>\r\n\r\n      {/* Layout options */}\r\n      <div className=\"controls\">\r\n        <label>\r\n          Orientation:\r\n          <select value={orientation}\r\n                  onChange={e=>setOrientation(e.target.value)}\r\n                  disabled={!closed}>\r\n            <option value=\"both\">Both</option>\r\n            <option value=\"horizontal\">Horizontal only</option>\r\n            <option value=\"vertical\">Vertical only</option>\r\n          </select>\r\n        </label>\r\n        <label>\r\n          Tile short side (m):\r\n          <input type=\"number\" step=\"0.01\" value={tileW}\r\n                 onChange={e=>setTileW(+e.target.value||0)}\r\n                 disabled={!closed}/>\r\n        </label>\r\n        <label>\r\n          Offset (m):\r\n          <input type=\"number\" step=\"0.001\" value={margin}\r\n                 onChange={e=>setMargin(+e.target.value||0)}\r\n                 disabled={!closed}/>\r\n        </label>\r\n        <button onClick={optimize} disabled={!closed}>Optimize</button>\r\n      </div>\r\n\r\n      {/* Manual add/delete */}\r\n      {closed && (\r\n        <div className=\"controls\">\r\n          <label>\r\n            New tile length:\r\n            <select value={newTileLen}\r\n                    onChange={e=>setNewTileLen(+e.target.value)}>\r\n              {tileLengths.map(L=>(\r\n                <option key={L} value={L}>{L}Â m</option>\r\n              ))}\r\n            </select>\r\n          </label>\r\n          <button onClick={addTile}>Add Tile</button>\r\n          <span style={{marginLeft:12}}>(dblâ€‘click to delete)</span>\r\n        </div>\r\n      )}\r\n\r\n      {/* Pricing inputs for each tile type */}\r\n      <div className=\"controls\">\r\n        <label>\r\n          Price per 4Â m tile (â‚¬):\r\n          <input\r\n            type=\"number\" step=\"0.01\"\r\n            value={prices[4]}\r\n            onChange={e => setPrices({...prices, 4: +e.target.value || 0})}\r\n          />\r\n        </label>\r\n        <label>\r\n          Price per 2Â m tile (â‚¬):\r\n          <input\r\n            type=\"number\" step=\"0.01\"\r\n            value={prices[2]}\r\n            onChange={e => setPrices({...prices, 2: +e.target.value || 0})}\r\n          />\r\n        </label>\r\n        <label>\r\n          Price per 1Â m tile (â‚¬):\r\n          <input\r\n            type=\"number\" step=\"0.01\"\r\n            value={prices[1]}\r\n            onChange={e => setPrices({...prices, 1: +e.target.value || 0})}\r\n          />\r\n        </label>\r\n      </div>\r\n\r\n      {/* Tile counts & cost */}\r\n      {placements.length>0 && (\r\n        <div className=\"controls\">\r\n          <p>\r\n            <strong>Counts:</strong>Â \r\n            4Â m:Â {tileCounts[4]},Â \r\n            2Â m:Â {tileCounts[2]},Â \r\n            1Â m:Â {tileCounts[1]}\r\n          </p>\r\n          <p><strong>Tile cost:</strong>Â â‚¬{tileCost.toFixed(2)}</p>\r\n        </div>\r\n      )}\r\n\r\n      {/* Boundary & grand total */}\r\n      {placements.length>0 && (\r\n        <div className=\"controls\">\r\n          <label>\r\n            Price per meter (â‚¬):\r\n            <input type=\"number\" step=\"0.01\"\r\n                   value={pricePerMeter}\r\n                   onChange={e=>setPricePerMeter(+e.target.value||0)} />\r\n          </label>\r\n          <button onClick={calculateBoundary}>\r\n            Calculate Offset Perimeter\r\n          </button>\r\n          <p><strong>Offset perimeter:</strong>Â {boundaryPerimeter.toFixed(2)}Â m</p>\r\n          <p><strong>Perimeter cost:</strong>Â â‚¬{boundaryCost.toFixed(2)}</p>\r\n          <p><strong>Grand total:</strong>Â â‚¬{grandTotal.toFixed(2)}</p>\r\n        </div>\r\n      )}\r\n\r\n      {/* Canvas */}\r\n      <LayoutCanvas\r\n        zoneW={zoneW}\r\n        zoneH={zoneH}\r\n        polygonPoints={polygonPoints}\r\n        closed={closed}\r\n        placements={placements}\r\n        setPlacements={setPlacements}\r\n        removeTile={removeTile}\r\n        margin={margin}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}