{"ast":null,"code":"var _jsxFileName = \"c:\\\\New folder (2)\\\\src\\\\components\\\\LayoutCanvas.js\",\n  _s = $RefreshSig$();\n// src/components/LayoutCanvas.js\nimport React, { useRef, useEffect } from 'react';\nimport * as turf from '@turf/turf';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LayoutCanvas({\n  zoneW,\n  zoneH,\n  polygonPoints,\n  closed,\n  placements,\n  margin // in meters (e.g. 0.207)\n}) {\n  _s();\n  const ref = useRef();\n  const scale = 100; // px per meter\n\n  useEffect(() => {\n    const c = ref.current;\n    const ctx = c.getContext('2d');\n    c.width = zoneW * scale;\n    c.height = zoneH * scale;\n    ctx.clearRect(0, 0, c.width, c.height);\n\n    // 1) Draw polygon + vertices\n    if (polygonPoints.length) {\n      ctx.strokeStyle = '#0066CC';\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      polygonPoints.forEach((p, i) => {\n        const X = p.x * scale,\n          Y = p.y * scale;\n        i === 0 ? ctx.moveTo(X, Y) : ctx.lineTo(X, Y);\n      });\n      if (closed) ctx.closePath();\n      ctx.stroke();\n      ctx.fillStyle = '#0066CC';\n      polygonPoints.forEach(p => {\n        ctx.beginPath();\n        ctx.arc(p.x * scale, p.y * scale, 4, 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    }\n    if (!closed || !placements.length) return;\n\n    // 2) Draw tiles\n    placements.forEach(t => {\n      const x = t.x * scale,\n        y = t.y * scale;\n      const w = t.width * scale,\n        h = t.height * scale;\n      ctx.fillStyle = '#DDD';\n      ctx.strokeStyle = '#333';\n      ctx.lineWidth = 1;\n      ctx.fillRect(x, y, w, h);\n      ctx.strokeRect(x, y, w, h);\n    });\n\n    // 3) Build tile‐shape buffer\n    let unionPoly = null;\n    placements.forEach(t => {\n      const poly = turf.polygon([[[t.x, t.y], [t.x + t.width, t.y], [t.x + t.width, t.y + t.height], [t.x, t.y + t.height], [t.x, t.y]]]);\n      unionPoly = unionPoly ? turf.union(unionPoly, poly) : poly;\n    });\n    const tileBuffer = turf.buffer(unionPoly, margin, {\n      units: 'meters'\n    });\n\n    // draw entire tileBuffer\n    ctx.strokeStyle = '#F00';\n    ctx.setLineDash([6, 4]);\n    ctx.lineWidth = 2;\n    const drawRing = ring => {\n      ctx.beginPath();\n      ring.forEach(([px, py], i) => {\n        const X = px * scale,\n          Y = py * scale;\n        i === 0 ? ctx.moveTo(X, Y) : ctx.lineTo(X, Y);\n      });\n      ctx.closePath();\n      ctx.stroke();\n    };\n    const tbGeom = tileBuffer.geometry;\n    if (tbGeom.type === 'Polygon') {\n      drawRing(tbGeom.coordinates[0]);\n    } else {\n      tbGeom.coordinates.forEach(poly => drawRing(poly[0]));\n    }\n\n    // 4) For edges too far from tiles, draw from polygon\n    // Compute polygon winding (CCW?)\n    let area2 = 0;\n    polygonPoints.forEach((p, i) => {\n      const q = polygonPoints[(i + 1) % polygonPoints.length];\n      area2 += p.x * q.y - q.x * p.y;\n    });\n    const ccw = area2 > 0;\n\n    // helper: is a point offset from the polygon edge inside the tileBuffer?\n    const covered = (mx, my, nx, ny) => {\n      const ox = mx + nx * margin;\n      const oy = my + ny * margin;\n      return turf.booleanPointInPolygon(turf.point([ox, oy]), tileBuffer);\n    };\n\n    // draw polygon offsets only where needed\n    polygonPoints.forEach((p, i) => {\n      const q = polygonPoints[(i + 1) % polygonPoints.length];\n      // edge vector\n      const dx = q.x - p.x,\n        dy = q.y - p.y;\n      const len = Math.hypot(dx, dy);\n      // interior normal\n      let nx = -dy / len,\n        ny = dx / len;\n      if (!ccw) {\n        nx = -nx;\n        ny = -ny;\n      }\n      // midpoint\n      const mx = (p.x + q.x) / 2,\n        my = (p.y + q.y) / 2;\n      if (!covered(mx, my, nx, ny)) {\n        // draw that offset edge\n        const px = (p.x + nx * margin) * scale;\n        const py = (p.y + ny * margin) * scale;\n        const qx = (q.x + nx * margin) * scale;\n        const qy = (q.y + ny * margin) * scale;\n        ctx.beginPath();\n        ctx.moveTo(px, py);\n        ctx.lineTo(qx, qy);\n        ctx.stroke();\n      }\n    });\n    ctx.setLineDash([]);\n  }, [zoneW, zoneH, polygonPoints, closed, placements, margin]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: ref,\n    style: {\n      border: '1px solid #333',\n      marginTop: 20\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n_s(LayoutCanvas, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n_c = LayoutCanvas;\nvar _c;\n$RefreshReg$(_c, \"LayoutCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","turf","jsxDEV","_jsxDEV","LayoutCanvas","zoneW","zoneH","polygonPoints","closed","placements","margin","_s","ref","scale","c","current","ctx","getContext","width","height","clearRect","length","strokeStyle","lineWidth","beginPath","forEach","p","i","X","x","Y","y","moveTo","lineTo","closePath","stroke","fillStyle","arc","Math","PI","fill","t","w","h","fillRect","strokeRect","unionPoly","poly","polygon","union","tileBuffer","buffer","units","setLineDash","drawRing","ring","px","py","tbGeom","geometry","type","coordinates","area2","q","ccw","covered","mx","my","nx","ny","ox","oy","booleanPointInPolygon","point","dx","dy","len","hypot","qx","qy","style","border","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["c:/New folder (2)/src/components/LayoutCanvas.js"],"sourcesContent":["// src/components/LayoutCanvas.js\r\nimport React, { useRef, useEffect } from 'react';\r\nimport * as turf from '@turf/turf';\r\n\r\nexport default function LayoutCanvas({\r\n  zoneW,\r\n  zoneH,\r\n  polygonPoints,\r\n  closed,\r\n  placements,\r\n  margin  // in meters (e.g. 0.207)\r\n}) {\r\n  const ref = useRef();\r\n  const scale = 100; // px per meter\r\n\r\n  useEffect(() => {\r\n    const c = ref.current;\r\n    const ctx = c.getContext('2d');\r\n    c.width  = zoneW * scale;\r\n    c.height = zoneH * scale;\r\n    ctx.clearRect(0, 0, c.width, c.height);\r\n\r\n    // 1) Draw polygon + vertices\r\n    if (polygonPoints.length) {\r\n      ctx.strokeStyle = '#0066CC';\r\n      ctx.lineWidth = 2;\r\n      ctx.beginPath();\r\n      polygonPoints.forEach((p, i) => {\r\n        const X = p.x*scale, Y = p.y*scale;\r\n        i===0 ? ctx.moveTo(X,Y) : ctx.lineTo(X,Y);\r\n      });\r\n      if (closed) ctx.closePath();\r\n      ctx.stroke();\r\n\r\n      ctx.fillStyle = '#0066CC';\r\n      polygonPoints.forEach(p => {\r\n        ctx.beginPath();\r\n        ctx.arc(p.x*scale, p.y*scale, 4, 0, 2*Math.PI);\r\n        ctx.fill();\r\n      });\r\n    }\r\n\r\n    if (!closed || !placements.length) return;\r\n\r\n    // 2) Draw tiles\r\n    placements.forEach(t => {\r\n      const x = t.x*scale, y = t.y*scale;\r\n      const w = t.width*scale, h = t.height*scale;\r\n      ctx.fillStyle   = '#DDD';\r\n      ctx.strokeStyle = '#333';\r\n      ctx.lineWidth   = 1;\r\n      ctx.fillRect(x,y,w,h);\r\n      ctx.strokeRect(x,y,w,h);\r\n    });\r\n\r\n    // 3) Build tile‐shape buffer\r\n    let unionPoly = null;\r\n    placements.forEach(t => {\r\n      const poly = turf.polygon([[\r\n        [t.x,            t.y],\r\n        [t.x + t.width,  t.y],\r\n        [t.x + t.width,  t.y + t.height],\r\n        [t.x,            t.y + t.height],\r\n        [t.x,            t.y]\r\n      ]]);\r\n      unionPoly = unionPoly ? turf.union(unionPoly, poly) : poly;\r\n    });\r\n    const tileBuffer = turf.buffer(unionPoly, margin, { units:'meters' });\r\n\r\n    // draw entire tileBuffer\r\n    ctx.strokeStyle = '#F00';\r\n    ctx.setLineDash([6,4]);\r\n    ctx.lineWidth = 2;\r\n\r\n    const drawRing = ring => {\r\n      ctx.beginPath();\r\n      ring.forEach(([px,py], i) => {\r\n        const X=px*scale, Y=py*scale;\r\n        i===0?ctx.moveTo(X,Y):ctx.lineTo(X,Y);\r\n      });\r\n      ctx.closePath();\r\n      ctx.stroke();\r\n    };\r\n\r\n    const tbGeom = tileBuffer.geometry;\r\n    if (tbGeom.type==='Polygon') {\r\n      drawRing(tbGeom.coordinates[0]);\r\n    } else {\r\n      tbGeom.coordinates.forEach(poly=>drawRing(poly[0]));\r\n    }\r\n\r\n    // 4) For edges too far from tiles, draw from polygon\r\n    // Compute polygon winding (CCW?)\r\n    let area2 = 0;\r\n    polygonPoints.forEach((p,i) => {\r\n      const q = polygonPoints[(i+1)%polygonPoints.length];\r\n      area2 += p.x*q.y - q.x*p.y;\r\n    });\r\n    const ccw = area2 > 0;\r\n\r\n    // helper: is a point offset from the polygon edge inside the tileBuffer?\r\n    const covered = (mx,my,nx,ny) => {\r\n      const ox = mx + nx*margin;\r\n      const oy = my + ny*margin;\r\n      return turf.booleanPointInPolygon(turf.point([ox,oy]), tileBuffer);\r\n    };\r\n\r\n    // draw polygon offsets only where needed\r\n    polygonPoints.forEach((p,i) => {\r\n      const q = polygonPoints[(i+1)%polygonPoints.length];\r\n      // edge vector\r\n      const dx = q.x - p.x, dy = q.y - p.y;\r\n      const len = Math.hypot(dx, dy);\r\n      // interior normal\r\n      let nx = -dy/len, ny = dx/len;\r\n      if (!ccw) { nx = -nx; ny = -ny; }\r\n      // midpoint\r\n      const mx = (p.x + q.x)/2, my = (p.y + q.y)/2;\r\n      if (!covered(mx,my,nx,ny)) {\r\n        // draw that offset edge\r\n        const px = (p.x + nx*margin)*scale;\r\n        const py = (p.y + ny*margin)*scale;\r\n        const qx = (q.x + nx*margin)*scale;\r\n        const qy = (q.y + ny*margin)*scale;\r\n        ctx.beginPath();\r\n        ctx.moveTo(px,py);\r\n        ctx.lineTo(qx,qy);\r\n        ctx.stroke();\r\n      }\r\n    });\r\n\r\n    ctx.setLineDash([]);\r\n  }, [zoneW, zoneH, polygonPoints, closed, placements, margin]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={ref}\r\n      style={{ border:'1px solid #333', marginTop:20 }}\r\n    />\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}