{"ast":null,"code":"import*as turf from'@turf/turf';/**\r\n * Greedy pack inside polygon inset by margin.\r\n */export default function optimizeLayout(polygonPoints,lengthsIn,tileW,margin,orientation){// 1) Build & inward‑buffer the room\nconst coords=polygonPoints.map(p=>[p.x,p.y]);coords.push(coords[0]);const room=turf.polygon([coords]);const inner=turf.buffer(room,-margin,{units:'meters'});if(!inner||!inner.geometry){return{placements:[]};}// 2) BBox of inner area\nconst[minX,minY,maxX,maxY]=turf.bbox(inner);// 3) Sort lengths descending\nconst lengths=[...lengthsIn].sort((a,b)=>b-a);const minLen=lengths[lengths.length-1];const placements=[];// 4) Fit test\nfunction fitsInside(x,y,w,h){const rect=turf.polygon([[[x,y],[x+w,y],[x+w,y+h],[x,y+h],[x,y]]]);return turf.booleanContains(inner,rect);}const xStep=minLen;const yStep=tileW;// 5) Horizontal strips\nif(orientation==='both'||orientation==='horizontal'){for(let y=minY;y<=maxY-tileW;y+=yStep){let x=minX;while(x<=maxX-minLen){let placed=false;for(const L of lengths){if(fitsInside(x,y,L,tileW)){placements.push({x,y,width:L,height:tileW,length:L});x+=L;placed=true;break;}}if(!placed)x+=xStep;}}}// 6) Vertical strips\nif(orientation==='both'||orientation==='vertical'){for(let x=minX;x<=maxX-tileW;x+=xStep){let y=minY;while(y<=maxY-minLen){let placed=false;for(const L of lengths){if(fitsInside(x,y,tileW,L)){placements.push({x,y,width:tileW,height:L,length:L});y+=L;placed=true;break;}}if(!placed)y+=yStep;}}}return{placements};}","map":{"version":3,"names":["turf","optimizeLayout","polygonPoints","lengthsIn","tileW","margin","orientation","coords","map","p","x","y","push","room","polygon","inner","buffer","units","geometry","placements","minX","minY","maxX","maxY","bbox","lengths","sort","a","b","minLen","length","fitsInside","w","h","rect","booleanContains","xStep","yStep","placed","L","width","height"],"sources":["c:/apps/src/utils/optimizer.js"],"sourcesContent":["import * as turf from '@turf/turf';\r\n\r\n/**\r\n * Greedy pack inside polygon inset by margin.\r\n */\r\nexport default function optimizeLayout(\r\n  polygonPoints,\r\n  lengthsIn,\r\n  tileW,\r\n  margin,\r\n  orientation\r\n) {\r\n  // 1) Build & inward‑buffer the room\r\n  const coords = polygonPoints.map(p=>[p.x,p.y]);\r\n  coords.push(coords[0]);\r\n  const room  = turf.polygon([coords]);\r\n  const inner = turf.buffer(room, -margin, { units:'meters' });\r\n  if (!inner || !inner.geometry) {\r\n    return { placements: [] };\r\n  }\r\n\r\n  // 2) BBox of inner area\r\n  const [minX,minY,maxX,maxY] = turf.bbox(inner);\r\n\r\n  // 3) Sort lengths descending\r\n  const lengths = [...lengthsIn].sort((a,b)=>b-a);\r\n  const minLen  = lengths[lengths.length-1];\r\n\r\n  const placements = [];\r\n\r\n  // 4) Fit test\r\n  function fitsInside(x,y,w,h) {\r\n    const rect = turf.polygon([[\r\n      [x,y],[x+w,y],[x+w,y+h],[x,y+h],[x,y]\r\n    ]]);\r\n    return turf.booleanContains(inner, rect);\r\n  }\r\n\r\n  const xStep = minLen;\r\n  const yStep = tileW;\r\n\r\n  // 5) Horizontal strips\r\n  if (orientation==='both' || orientation==='horizontal') {\r\n    for (let y=minY; y<=maxY-tileW; y += yStep) {\r\n      let x=minX;\r\n      while (x<=maxX-minLen) {\r\n        let placed=false;\r\n        for (const L of lengths) {\r\n          if (fitsInside(x,y,L,tileW)) {\r\n            placements.push({ x, y,\r\n              width:L, height:tileW, length:L });\r\n            x += L;\r\n            placed = true; break;\r\n          }\r\n        }\r\n        if (!placed) x += xStep;\r\n      }\r\n    }\r\n  }\r\n\r\n  // 6) Vertical strips\r\n  if (orientation==='both' || orientation==='vertical') {\r\n    for (let x=minX; x<=maxX-tileW; x += xStep) {\r\n      let y=minY;\r\n      while (y<=maxY-minLen) {\r\n        let placed=false;\r\n        for (const L of lengths) {\r\n          if (fitsInside(x,y,tileW,L)) {\r\n            placements.push({ x, y,\r\n              width:tileW, height:L, length:L });\r\n            y += L;\r\n            placed = true; break;\r\n          }\r\n        }\r\n        if (!placed) y += yStep;\r\n      }\r\n    }\r\n  }\r\n\r\n  return { placements };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}