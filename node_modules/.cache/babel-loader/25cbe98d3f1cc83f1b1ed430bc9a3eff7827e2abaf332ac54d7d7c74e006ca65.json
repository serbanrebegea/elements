{"ast":null,"code":"var _jsxFileName = \"c:\\\\apps\\\\src\\\\components\\\\LayoutCanvas.js\",\n  _s = $RefreshSig$();\n// src/components/LayoutCanvas.js\n\nimport React, { useRef, useEffect, useState, useMemo } from 'react';\nimport * as turf from '@turf/turf';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LayoutCanvas({\n  zoneW,\n  zoneH,\n  polygonPoints,\n  closed,\n  placements,\n  setPlacements,\n  margin // in meters, e.g. 0.207\n}) {\n  _s();\n  const canvasRef = useRef();\n  const [dragging, setDragging] = useState(null);\n  const scale = 100; // px per meter\n  const snapTol = 0.05; // snap tolerance in meters\n\n  // Precompute the inward-buffered polygon for containment tests\n  const innerPoly = useMemo(() => {\n    if (!closed || polygonPoints.length < 3) return null;\n    const coords = polygonPoints.map(p => [p.x, p.y]);\n    coords.push(coords[0]);\n    const room = turf.polygon([coords]);\n    const inner = turf.buffer(room, -margin, {\n      units: 'meters'\n    });\n    return inner && inner.geometry ? inner : null;\n  }, [polygonPoints, closed, margin]);\n\n  // Test if a tile at (x,y) with size w×h fits fully inside innerPoly\n  function fitsInside(x, y, w, h) {\n    if (!innerPoly) return false;\n    const rect = turf.polygon([[[x, y], [x + w, y], [x + w, y + h], [x, y + h], [x, y]]]);\n    return turf.booleanContains(innerPoly, rect);\n  }\n\n  // Snap candidate position (x,y) to nearby tile edges within snapTol\n  function applySnap(idx, x, y, w, h) {\n    placements.forEach((t, j) => {\n      if (j === idx) return;\n      // vertical edges\n      [[t.x, 'L'], [t.x + t.width, 'R']].forEach(([sx]) => {\n        if (Math.abs(x - sx) < snapTol) x = sx;\n        if (Math.abs(x + w - sx) < snapTol) x = sx - w;\n      });\n      // horizontal edges\n      [[t.y, 'T'], [t.y + t.height, 'B']].forEach(([sy]) => {\n        if (Math.abs(y - sy) < snapTol) y = sy;\n        if (Math.abs(y + h - sy) < snapTol) y = sy - h;\n      });\n    });\n    return {\n      x,\n      y\n    };\n  }\n\n  // Mouse event handlers for dragging\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    function toTileCoords(e) {\n      const rect = canvas.getBoundingClientRect();\n      const mx = (e.clientX - rect.left) / scale;\n      const my = (e.clientY - rect.top) / scale;\n      return {\n        mx,\n        my\n      };\n    }\n    function onMouseDown(e) {\n      const {\n        mx,\n        my\n      } = toTileCoords(e);\n      for (let i = placements.length - 1; i >= 0; i--) {\n        const t = placements[i];\n        if (mx >= t.x && mx <= t.x + t.width && my >= t.y && my <= t.y + t.height) {\n          setDragging({\n            idx: i,\n            offsetX: mx - t.x,\n            offsetY: my - t.y\n          });\n          return;\n        }\n      }\n    }\n    function onMouseMove(e) {\n      if (!dragging) return;\n      const {\n        mx,\n        my\n      } = toTileCoords(e);\n      const {\n        idx,\n        offsetX,\n        offsetY\n      } = dragging;\n      const t = placements[idx];\n      let nx = mx - offsetX;\n      let ny = my - offsetY;\n      ({\n        x: nx,\n        y: ny\n      } = applySnap(idx, nx, ny, t.width, t.height));\n      if (fitsInside(nx, ny, t.width, t.height)) {\n        const newPl = [...placements];\n        newPl[idx] = {\n          ...t,\n          x: nx,\n          y: ny\n        };\n        setPlacements(newPl);\n      }\n    }\n    function onMouseUp() {\n      if (dragging) setDragging(null);\n    }\n    canvas.addEventListener('mousedown', onMouseDown);\n    window.addEventListener('mousemove', onMouseMove);\n    window.addEventListener('mouseup', onMouseUp);\n    return () => {\n      canvas.removeEventListener('mousedown', onMouseDown);\n      window.removeEventListener('mousemove', onMouseMove);\n      window.removeEventListener('mouseup', onMouseUp);\n    };\n  }, [dragging, placements, fitsInside]);\n\n  // Draw everything: polygon, tiles, and dynamic 207 mm boundary around tile union\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    canvas.width = zoneW * scale;\n    canvas.height = zoneH * scale;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Draw polygon outline & vertices\n    if (polygonPoints.length) {\n      ctx.strokeStyle = '#0066CC';\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      polygonPoints.forEach((p, i) => {\n        const X = p.x * scale,\n          Y = p.y * scale;\n        i === 0 ? ctx.moveTo(X, Y) : ctx.lineTo(X, Y);\n      });\n      if (closed) ctx.closePath();\n      ctx.stroke();\n      ctx.fillStyle = '#0066CC';\n      polygonPoints.forEach(p => {\n        ctx.beginPath();\n        ctx.arc(p.x * scale, p.y * scale, 4, 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    }\n\n    // Draw tiles\n    placements.forEach(t => {\n      const x = t.x * scale,\n        y = t.y * scale;\n      const w = t.width * scale,\n        h = t.height * scale;\n      ctx.fillStyle = '#DDD';\n      ctx.strokeStyle = '#333';\n      ctx.lineWidth = 1;\n      ctx.fillRect(x, y, w, h);\n      ctx.strokeRect(x, y, w, h);\n    });\n\n    // Draw dynamic 207 mm dotted boundary around the *tile union*\n    if (placements.length) {\n      let unionPoly = null;\n      placements.forEach(t => {\n        const poly = turf.polygon([[[t.x, t.y], [t.x + t.width, t.y], [t.x + t.width, t.y + t.height], [t.x, t.y + t.height], [t.x, t.y]]]);\n        unionPoly = unionPoly ? turf.union(unionPoly, poly) : poly;\n      });\n      const buffered = turf.buffer(unionPoly, margin, {\n        units: 'meters'\n      });\n      if (buffered && buffered.geometry) {\n        ctx.strokeStyle = '#F00';\n        ctx.setLineDash([6, 4]);\n        ctx.lineWidth = 2;\n        const drawRing = coords => {\n          ctx.beginPath();\n          coords.forEach(([px, py], i) => {\n            const X = px * scale,\n              Y = py * scale;\n            i === 0 ? ctx.moveTo(X, Y) : ctx.lineTo(X, Y);\n          });\n          ctx.closePath();\n          ctx.stroke();\n        };\n        const geom = buffered.geometry;\n        if (geom.type === 'Polygon') {\n          drawRing(geom.coordinates[0]);\n        } else {\n          geom.coordinates.forEach(polyCoords => drawRing(polyCoords[0]));\n        }\n        ctx.setLineDash([]);\n      }\n    }\n  }, [zoneW, zoneH, polygonPoints, closed, placements, margin]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      border: '1px solid #333',\n      cursor: dragging ? 'grabbing' : 'grab',\n      display: 'block',\n      marginTop: 20\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n}\n_s(LayoutCanvas, \"kiaGtzYXKhKNH9EKMth3WvM/eXA=\");\n_c = LayoutCanvas;\nvar _c;\n$RefreshReg$(_c, \"LayoutCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useMemo","turf","jsxDEV","_jsxDEV","LayoutCanvas","zoneW","zoneH","polygonPoints","closed","placements","setPlacements","margin","_s","canvasRef","dragging","setDragging","scale","snapTol","innerPoly","length","coords","map","p","x","y","push","room","polygon","inner","buffer","units","geometry","fitsInside","w","h","rect","booleanContains","applySnap","idx","forEach","t","j","width","sx","Math","abs","height","sy","canvas","current","toTileCoords","e","getBoundingClientRect","mx","clientX","left","my","clientY","top","onMouseDown","i","offsetX","offsetY","onMouseMove","nx","ny","newPl","onMouseUp","addEventListener","window","removeEventListener","ctx","getContext","clearRect","strokeStyle","lineWidth","beginPath","X","Y","moveTo","lineTo","closePath","stroke","fillStyle","arc","PI","fill","fillRect","strokeRect","unionPoly","poly","union","buffered","setLineDash","drawRing","px","py","geom","type","coordinates","polyCoords","ref","style","border","cursor","display","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["c:/apps/src/components/LayoutCanvas.js"],"sourcesContent":["// src/components/LayoutCanvas.js\r\n\r\nimport React, { useRef, useEffect, useState, useMemo } from 'react';\r\nimport * as turf from '@turf/turf';\r\n\r\nexport default function LayoutCanvas({\r\n  zoneW,\r\n  zoneH,\r\n  polygonPoints,\r\n  closed,\r\n  placements,\r\n  setPlacements,\r\n  margin  // in meters, e.g. 0.207\r\n}) {\r\n  const canvasRef = useRef();\r\n  const [dragging, setDragging] = useState(null);\r\n  const scale = 100;       // px per meter\r\n  const snapTol = 0.05;    // snap tolerance in meters\r\n\r\n  // Precompute the inward-buffered polygon for containment tests\r\n  const innerPoly = useMemo(() => {\r\n    if (!closed || polygonPoints.length < 3) return null;\r\n    const coords = polygonPoints.map(p => [p.x, p.y]);\r\n    coords.push(coords[0]);\r\n    const room = turf.polygon([coords]);\r\n    const inner = turf.buffer(room, -margin, { units: 'meters' });\r\n    return inner && inner.geometry ? inner : null;\r\n  }, [polygonPoints, closed, margin]);\r\n\r\n  // Test if a tile at (x,y) with size w×h fits fully inside innerPoly\r\n  function fitsInside(x, y, w, h) {\r\n    if (!innerPoly) return false;\r\n    const rect = turf.polygon([[\r\n      [x, y],\r\n      [x + w, y],\r\n      [x + w, y + h],\r\n      [x, y + h],\r\n      [x, y]\r\n    ]]);\r\n    return turf.booleanContains(innerPoly, rect);\r\n  }\r\n\r\n  // Snap candidate position (x,y) to nearby tile edges within snapTol\r\n  function applySnap(idx, x, y, w, h) {\r\n    placements.forEach((t, j) => {\r\n      if (j === idx) return;\r\n      // vertical edges\r\n      [[t.x, 'L'], [t.x + t.width, 'R']].forEach(([sx]) => {\r\n        if (Math.abs(x - sx) < snapTol) x = sx;\r\n        if (Math.abs(x + w - sx) < snapTol) x = sx - w;\r\n      });\r\n      // horizontal edges\r\n      [[t.y, 'T'], [t.y + t.height, 'B']].forEach(([sy]) => {\r\n        if (Math.abs(y - sy) < snapTol) y = sy;\r\n        if (Math.abs(y + h - sy) < snapTol) y = sy - h;\r\n      });\r\n    });\r\n    return { x, y };\r\n  }\r\n\r\n  // Mouse event handlers for dragging\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n\r\n    function toTileCoords(e) {\r\n      const rect = canvas.getBoundingClientRect();\r\n      const mx = (e.clientX - rect.left) / scale;\r\n      const my = (e.clientY - rect.top) / scale;\r\n      return { mx, my };\r\n    }\r\n\r\n    function onMouseDown(e) {\r\n      const { mx, my } = toTileCoords(e);\r\n      for (let i = placements.length - 1; i >= 0; i--) {\r\n        const t = placements[i];\r\n        if (\r\n          mx >= t.x && mx <= t.x + t.width &&\r\n          my >= t.y && my <= t.y + t.height\r\n        ) {\r\n          setDragging({ idx: i, offsetX: mx - t.x, offsetY: my - t.y });\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    function onMouseMove(e) {\r\n      if (!dragging) return;\r\n      const { mx, my } = toTileCoords(e);\r\n      const { idx, offsetX, offsetY } = dragging;\r\n      const t = placements[idx];\r\n      let nx = mx - offsetX;\r\n      let ny = my - offsetY;\r\n      ({ x: nx, y: ny } = applySnap(idx, nx, ny, t.width, t.height));\r\n      if (fitsInside(nx, ny, t.width, t.height)) {\r\n        const newPl = [...placements];\r\n        newPl[idx] = { ...t, x: nx, y: ny };\r\n        setPlacements(newPl);\r\n      }\r\n    }\r\n\r\n    function onMouseUp() {\r\n      if (dragging) setDragging(null);\r\n    }\r\n\r\n    canvas.addEventListener('mousedown', onMouseDown);\r\n    window.addEventListener('mousemove', onMouseMove);\r\n    window.addEventListener('mouseup', onMouseUp);\r\n\r\n    return () => {\r\n      canvas.removeEventListener('mousedown', onMouseDown);\r\n      window.removeEventListener('mousemove', onMouseMove);\r\n      window.removeEventListener('mouseup', onMouseUp);\r\n    };\r\n  }, [dragging, placements, fitsInside]);\r\n\r\n  // Draw everything: polygon, tiles, and dynamic 207 mm boundary around tile union\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    canvas.width  = zoneW * scale;\r\n    canvas.height = zoneH * scale;\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Draw polygon outline & vertices\r\n    if (polygonPoints.length) {\r\n      ctx.strokeStyle = '#0066CC';\r\n      ctx.lineWidth = 2;\r\n      ctx.beginPath();\r\n      polygonPoints.forEach((p, i) => {\r\n        const X = p.x * scale, Y = p.y * scale;\r\n        i === 0 ? ctx.moveTo(X, Y) : ctx.lineTo(X, Y);\r\n      });\r\n      if (closed) ctx.closePath();\r\n      ctx.stroke();\r\n\r\n      ctx.fillStyle = '#0066CC';\r\n      polygonPoints.forEach(p => {\r\n        ctx.beginPath();\r\n        ctx.arc(p.x * scale, p.y * scale, 4, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n      });\r\n    }\r\n\r\n    // Draw tiles\r\n    placements.forEach(t => {\r\n      const x = t.x * scale, y = t.y * scale;\r\n      const w = t.width * scale, h = t.height * scale;\r\n      ctx.fillStyle   = '#DDD';\r\n      ctx.strokeStyle = '#333';\r\n      ctx.lineWidth   = 1;\r\n      ctx.fillRect(x, y, w, h);\r\n      ctx.strokeRect(x, y, w, h);\r\n    });\r\n\r\n    // Draw dynamic 207 mm dotted boundary around the *tile union*\r\n    if (placements.length) {\r\n      let unionPoly = null;\r\n      placements.forEach(t => {\r\n        const poly = turf.polygon([[\r\n          [t.x, t.y],\r\n          [t.x + t.width, t.y],\r\n          [t.x + t.width, t.y + t.height],\r\n          [t.x, t.y + t.height],\r\n          [t.x, t.y]\r\n        ]]);\r\n        unionPoly = unionPoly ? turf.union(unionPoly, poly) : poly;\r\n      });\r\n      const buffered = turf.buffer(unionPoly, margin, { units: 'meters' });\r\n      if (buffered && buffered.geometry) {\r\n        ctx.strokeStyle = '#F00';\r\n        ctx.setLineDash([6, 4]);\r\n        ctx.lineWidth = 2;\r\n\r\n        const drawRing = coords => {\r\n          ctx.beginPath();\r\n          coords.forEach(([px, py], i) => {\r\n            const X = px * scale, Y = py * scale;\r\n            i === 0 ? ctx.moveTo(X, Y) : ctx.lineTo(X, Y);\r\n          });\r\n          ctx.closePath();\r\n          ctx.stroke();\r\n        };\r\n\r\n        const geom = buffered.geometry;\r\n        if (geom.type === 'Polygon') {\r\n          drawRing(geom.coordinates[0]);\r\n        } else {\r\n          geom.coordinates.forEach(polyCoords => drawRing(polyCoords[0]));\r\n        }\r\n\r\n        ctx.setLineDash([]);\r\n      }\r\n    }\r\n  }, [zoneW, zoneH, polygonPoints, closed, placements, margin]);\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      style={{\r\n        border: '1px solid #333',\r\n        cursor: dragging ? 'grabbing' : 'grab',\r\n        display: 'block',\r\n        marginTop: 20\r\n      }}\r\n    />\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}